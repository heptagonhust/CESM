module radae
    !------------------------------------------------------------------------------


      use radconstants,     only: nlwbands, idx_LW_0650_0800, idx_LW_0500_0650, &
            idx_LW_1000_1200, idx_LW_0800_1000,  idx_LW_1200_2000

      use physconst,        only: gravit, cpair, epsilo, stebol, &
                                 pstd, mwdry, mwco2, mwo3
    
      implicit none
    
      save
    !-----------------------------------------------------------------------------
    ! PUBLIC:: By default data and interfaces are private
    !-----------------------------------------------------------------------------
      private
      public radabs
    
   integer pcols      ! number of columns (max)
   integer psubcols   ! number of sub-columns (max)
   integer pver       ! number of vertical levels
   integer pverp      ! pver + 1

   parameter (pcols     = PCOLS)
   parameter (psubcols  = PSUBCOLS)
   parameter (pver      = PLEV)
   parameter (pverp     = pver + 1  )
   integer, parameter :: plev       = PLEV  ! number of vertical levels
   integer, parameter :: plevp      = plev + 1 ! plev + 1
!
! start, end indices for chunks owned by a given MPI task
! (set in phys_grid_init).
!
   integer :: begchunk = 0            ! 
   integer :: endchunk = -1           ! 
      integer,parameter :: r8 = selected_real_kind(12) ! 8 byte real
    
      integer, public, parameter :: nbands = 2          ! Number of spectral bands
    !
    ! Following data needed for restarts and in radclwmx
    !
      real(r8), public, allocatable, target :: abstot_3d(:,:,:,:) ! Non-adjacent layer absorptivites
      real(r8), public, allocatable, target :: absnxt_3d(:,:,:,:) ! Nearest layer absorptivities
      real(r8), public, allocatable, target :: emstot_3d(:,:,:)   ! Total emissivity
      integer,  public :: ntoplw    ! top level to solve for longwave cooling
    
    !-----------------------------------------------------------------------------
    ! PRIVATE:: The rest of the data is private to this module.
    !-----------------------------------------------------------------------------
      real(r8), parameter   :: p0     = pstd*10.0_r8! Standard pressure (dynes/cm**2)
      real(r8), parameter   :: amd    = mwdry ! Molecular weight of dry air (g/mol)
      real(r8), parameter   :: amco2  = mwco2! Molecular weight of co2   (g/mol)
      !real(r8), parameter   :: mwo3   = mwo3! Molecular weight of O3 (g/mol)
    
      !real(r8), parameter  :: gravit  = gravx    ! acceleration due to gravity (m/s**2)
      real(r8), parameter  :: gravit_cgs  = 100._r8*gravit  ! acceleration due to gravity (cm/s**2)
      real(r8), parameter  :: rga         = 1._r8/gravit_cgs! 1./gravit_cgs
      !real(r8), parameter  :: epsilo      = epsilox! Ratio of mol. wght of H2O to dry air
      real(r8), parameter  :: omeps       = 1._r8 - epsilo! 1._r8 - epsilo
      real(r8), parameter  :: sslp        = 1.013250e6_r8! Standard sea-level pressure (dynes/cm**2)
      real(r8), parameter  :: stebol_cgs  = 1.e3_r8*stebol! Stefan-Boltzmann's constant (CGS)
      real(r8), parameter  :: rgsslp      = 0.5_r8/(gravit_cgs*sslp) ! 0.5/(gravit_cgs*sslp)
      real(r8), parameter  :: dpfo3       = 2.5e-3_r8! Voigt correction factor for O3
      real(r8), parameter  :: dpfco2      = 5.0e-3_r8! Voigt correction factor for CO2
    
      integer, parameter :: n_u = 25   ! Number of U in abs/emis tables
      integer, parameter :: n_p = 10   ! Number of P in abs/emis tables
      integer, parameter :: n_tp = 10  ! Number of T_p in abs/emis tables
      integer, parameter :: n_te = 21  ! Number of T_e in abs/emis tables
      integer, parameter :: n_rh = 7   ! Number of RH in abs/emis tables
    
      real(r8):: ah2onw(n_p, n_tp, n_u, n_te, n_rh)   ! absorptivity (non-window)
      real(r8):: eh2onw(n_p, n_tp, n_u, n_te, n_rh)   ! emissivity   (non-window)
      real(r8):: ah2ow(n_p, n_tp, n_u, n_te, n_rh)    ! absorptivity (window, for adjacent layers)
      real(r8):: cn_ah2ow(n_p, n_tp, n_u, n_te, n_rh)    ! continuum transmission for absorptivity (window)
      real(r8):: cn_eh2ow(n_p, n_tp, n_u, n_te, n_rh)    ! continuum transmission for emissivity   (window)
      real(r8):: ln_ah2ow(n_p, n_tp, n_u, n_te, n_rh)    ! line-only transmission for absorptivity (window)
      real(r8):: ln_eh2ow(n_p, n_tp, n_u, n_te, n_rh)    ! line-only transmission for emissivity   (window)
    
      real(r8), parameter:: coefh(2,4) = reshape(  &
             (/ (/5.46557e+01_r8,-7.30387e-02_r8/), &
                (/1.09311e+02_r8,-1.46077e-01_r8/), &
                (/5.11479e+01_r8,-6.82615e-02_r8/), &
                (/1.02296e+02_r8,-1.36523e-01_r8/) /), (/2,4/) )
    !
      real(r8), parameter:: coefj(3,2) = reshape( &
                (/ (/2.82096e-02_r8,2.47836e-04_r8,1.16904e-06_r8/), &
                   (/9.27379e-02_r8,8.04454e-04_r8,6.88844e-06_r8/) /), (/3,2/) )
    !
      real(r8), parameter:: coefk(3,2) = reshape( &
                (/ (/2.48852e-01_r8,2.09667e-03_r8,2.60377e-06_r8/) , &
                   (/1.03594e+00_r8,6.58620e-03_r8,4.04456e-06_r8/) /), (/3,2/) )
      !real(r8):: c16,c17,c26,c27,c28,c29,c30,c31
      real(r8), parameter:: c16  = coefj(3,1)/coefj(2,1) ,&
      c17  = coefk(3,1)/coefk(2,1),&
      c26  = coefj(3,2)/coefj(2,2),&
      c27  = coefk(3,2)/coefk(2,2)
      real(r8), parameter:: c28  = .5_r8,&
      c29  = .002053_r8,&
      c30  = .1_r8,&
      c31  = 3.0e-5_r8
    !
    ! Farwing correction constants for narrow-band emissivity model,
    ! introduced to account for the deficiencies in narrow-band model
    ! used to derive the emissivity; tuned with Arkings line-by-line
    ! calculations.  Just used for water vapor overlap with trace gases.
    !
      real(r8), parameter:: fwcoef    = .1_r8   ! Farwing correction constant
      real(r8), parameter:: fwc1= .30_r8 ,fwc2 = 4.5_r8       ! Farwing correction constants 
      real(r8), parameter:: fc1    = 2.6_r8       ! Farwing correction constant 
    !
    ! Collins/Hackney/Edwards (C/H/E) & Collins/Lee-Taylor/Edwards (C/LT/E) 
    !       H2O parameterization
    !
    ! Notation:
    ! U   = integral (P/P_0 dW)  eq. 15 in Ramanathan/Downey 1986
    ! P   = atmospheric pressure
    ! P_0 = reference atmospheric pressure
    ! W   = precipitable water path
    ! T_e = emission temperature
    ! T_p = path temperature
    ! RH  = path relative humidity
    !
    ! absorptivity/emissivity in window are fit using an expression:
    !
    !      a/e = f_a/e * {1.0 - ln_a/e * cn_a/e} 
    !
    ! absorptivity/emissivity in non-window are fit using:
    ! 
    !      a/e = f_a/e * a/e_norm
    !
    ! where
    !      a/e = absorptivity/emissivity
    ! a/e_norm = absorptivity/emissivity normalized to 1
    !    f_a/e = value of a/e as U->infinity = f(T_e) only
    !   cn_a/e = continuum transmission
    !   ln_a/e = line transmission
    !
    ! spectral interval:
    !   1 = 0-800 cm^-1 and 1200-2200 cm^-1 (rotation and rotation-vibration)
    !   2 = 800-1200 cm^-1                  (window)
    !
      real(r8), parameter:: min_tp_h2o = 160.0_r8        ! min T_p for pre-calculated abs/emis 
      real(r8), parameter:: max_tp_h2o = 349.999999_r8   ! max T_p for pre-calculated abs/emis
      integer, parameter :: ntemp = 192 ! Number of temperatures in H2O sat. table for Tp
      integer, parameter :: o_fa = 6   ! Degree+1 of poly of T_e for absorptivity as U->inf.
      integer, parameter :: o_fe = 6   ! Degree+1 of poly of T_e for emissivity as U->inf.
    !-----------------------------------------------------------------------------
    ! Data for f in C/H/E fit -- value of A and E as U->infinity
    ! New C/LT/E fit (Hitran 2K, CKD 2.4) -- no change
    !     These values are determined by integrals of Planck functions or
    !     derivatives of Planck functions only.
    !-----------------------------------------------------------------------------
    !
    ! fa/fe coefficients for 2 bands (0-800 & 1200-2200, 800-1200 cm^-1)
    !
    ! Coefficients of polynomial for f_a in T_e
    !
      real(r8), parameter:: fat(o_fa,nbands) = reshape( (/ &
           (/-1.06665373E-01_r8,  2.90617375E-02_r8, -2.70642049E-04_r8,   &   ! 0-800&1200-2200 cm^-1
              1.07595511E-06_r8, -1.97419681E-09_r8,  1.37763374E-12_r8/), &   !   0-800&1200-2200 cm^-1
           (/ 1.10666537E+00_r8, -2.90617375E-02_r8,  2.70642049E-04_r8,   &   ! 800-1200 cm^-1
             -1.07595511E-06_r8,  1.97419681E-09_r8, -1.37763374E-12_r8/) /) & !   800-1200 cm^-1
           , (/o_fa,nbands/) )
    !
    ! Coefficients of polynomial for f_e in T_e
    !
      real(r8), parameter:: fet(o_fe,nbands) = reshape( (/ & 
          (/3.46148163E-01_r8,  1.51240299E-02_r8, -1.21846479E-04_r8,   &   ! 0-800&1200-2200 cm^-1
            4.04970123E-07_r8, -6.15368936E-10_r8,  3.52415071E-13_r8/), &   !   0-800&1200-2200 cm^-1
          (/6.53851837E-01_r8, -1.51240299E-02_r8,  1.21846479E-04_r8,   &   ! 800-1200 cm^-1
           -4.04970123E-07_r8,  6.15368936E-10_r8, -3.52415071E-13_r8/) /) & !   800-1200 cm^-1
          , (/o_fa,nbands/) )
    !
    ! Note: max values should be slightly underestimated to avoid index bound violations
    !
      real(r8), parameter:: min_lp_h2o = -3.0_r8         ! min log_10(P) for pre-calculated abs/emis 
      real(r8), parameter:: min_p_h2o = 1.0e-3_r8        ! min log_10(P) for pre-calculated abs/emis 
      real(r8), parameter:: max_lp_h2o = -0.0000001_r8   ! max log_10(P) for pre-calculated abs/emis 
      real(r8), parameter:: dlp_h2o = 0.3333333333333_r8 ! difference in adjacent elements of lp_h2o
     
      real(r8), parameter:: dtp_h2o = 21.111111111111_r8 ! difference in adjacent elements of tp_h2o
    
      real(r8), parameter:: min_rh_h2o = 0.0_r8          ! min RH for pre-calculated abs/emis 
      real(r8), parameter:: max_rh_h2o = 1.19999999_r8   ! max RH for pre-calculated abs/emis 
      real(r8), parameter:: drh_h2o = 0.2_r8             ! difference in adjacent elements of RH
    
      real(r8), parameter:: min_te_h2o = -120.0_r8       ! min T_e-T_p for pre-calculated abs/emis 
      real(r8), parameter:: max_te_h2o = 79.999999_r8    ! max T_e-T_p for pre-calculated abs/emis 
      real(r8), parameter:: dte_h2o  = 10.0_r8           ! difference in adjacent elements of te_h2o
    
      real(r8), parameter:: min_lu_h2o = -8.0_r8         ! min log_10(U) for pre-calculated abs/emis 
      real(r8), parameter:: min_u_h2o  = 1.0e-8_r8       ! min pressure-weighted path-length
      real(r8), parameter:: max_lu_h2o =  3.9999999_r8   ! max log_10(U) for pre-calculated abs/emis 
      real(r8), parameter:: dlu_h2o  = 0.5_r8            ! difference in adjacent elements of lu_h2o
    
      real(r8), parameter:: g1(6)=(/0.0468556_r8,0.0397454_r8,0.0407664_r8,0.0304380_r8,0.0540398_r8,0.0321962_r8/)
      real(r8), parameter :: g2(6)=(/14.4832_r8,4.30242_r8,5.23523_r8,3.25342_r8,0.698935_r8,16.5599_r8/)
      real(r8), parameter :: g3(6)=(/26.1898_r8,18.4476_r8,15.3633_r8,12.1927_r8,9.14992_r8,8.07092_r8/)
      real(r8), parameter :: g4(6)=(/0.0261782_r8,0.0369516_r8,0.0307266_r8,0.0243854_r8,0.0182932_r8,0.0161418_r8/)
      real(r8), parameter :: ab(6)=(/3.0857e-2_r8,2.3524e-2_r8,1.7310e-2_r8,2.6661e-2_r8,2.8074e-2_r8,2.2915e-2_r8/)
      real(r8), parameter :: bb(6)=(/-1.3512e-4_r8,-6.8320e-5_r8,-3.2609e-5_r8,-1.0228e-5_r8,-9.5743e-5_r8,-1.0304e-4_r8/)
      real(r8), parameter :: abp(6)=(/2.9129e-2_r8,2.4101e-2_r8,1.9821e-2_r8,2.6904e-2_r8,2.9458e-2_r8,1.9892e-2_r8/)
      real(r8), parameter :: bbp(6)=(/-1.3139e-4_r8,-5.5688e-5_r8,-4.6380e-5_r8,-8.0362e-5_r8,-1.0115e-4_r8,-8.8061e-5_r8/)
      real(r8), parameter ::  r293                = 1._r8/293._r8! 1/293
      real(r8), parameter ::  r250                = 1._r8/250._r8! 1/250
      real(r8), parameter ::  r3205               = 1._r8/.3205_r8! Line width factor for o3 (see R&Di)
      real(r8), parameter ::  r300                = 1._r8/300._r8 ! 1/300
      real(r8), parameter ::  rsslp               = 1._r8/sslp! Reciprocal of sea level pressure
      real(r8), parameter ::  r2sslp              = 1._r8/(2._r8*sslp)! 1/2 of rsslp
    
    !
    !Constants for computing U corresponding to H2O cont. path
    !
      real(r8), parameter ::  fdif               = 1.66_r8 ! secant(zenith angle) for diffusivity approx.
    
      real(r8), parameter ::  sslp_mks           = sslp / 10.0_r8! Sea-level pressure in MKS units
      real(r8), parameter ::   rmw   = amd/amco2
    
    ! Public Interfaces
    !====================================================================================
    CONTAINS
    !====================================================================================
    
    subroutine radabs(lchnk   ,ncol    ,             &
       pbr    ,pnm     ,co2em    ,co2eml  ,tplnka  , &
       s2c    ,tcg     ,w        ,h2otr   ,plco2   , &
       plh2o  ,co2t    ,tint     ,tlayr   ,plol    , &
       plos   ,pmln    ,piln     ,ucfc11  ,ucfc12  , &
       un2o0  ,un2o1   ,uch4     ,uco211  ,uco212  , &
       uco213 ,uco221  ,uco222   ,uco223  ,uptype  , &
       bn2o0  ,bn2o1   ,bch4    ,abplnk1  ,abplnk2 , &
       abstot ,absnxt  ,plh2ob  ,wb       , &
       odap_aer ,aer_trn_ttl, co2mmr)
    
       integer, intent(in) :: lchnk                       ! chunk identifier
       integer, intent(in) :: ncol                        ! number of atmospheric columns
    
       real(r8), intent(in) :: pbr(pcols,pver)            ! Prssr at mid-levels (dynes/cm2)
       real(r8), intent(in) :: pnm(pcols,pverp)           ! Prssr at interfaces (dynes/cm2)
       real(r8), intent(in) :: co2em(pcols,pverp)         ! Co2 emissivity function
       real(r8), intent(in) :: co2eml(pcols,pver)         ! Co2 emissivity function
       real(r8), intent(in) :: tplnka(pcols,pverp)        ! Planck fnctn level temperature
       real(r8), intent(in) :: s2c(pcols,pverp)           ! H2o continuum path length
       real(r8), intent(in) :: tcg(pcols,pverp)           ! H2o-mass-wgted temp. (Curtis-Godson approx.)
       real(r8), intent(in) :: w(pcols,pverp)             ! H2o prs wghted path
       real(r8), intent(in) :: h2otr(pcols,pverp)         ! H2o trnsmssn fnct for o3 overlap
       real(r8), intent(in) :: plco2(pcols,pverp)         ! Co2 prs wghted path length
       real(r8), intent(in) :: plh2o(pcols,pverp)         ! H2o prs wfhted path length
       real(r8), intent(in) :: co2t(pcols,pverp)          ! Tmp and prs wghted path length
       real(r8), intent(in) :: tint(pcols,pverp)          ! Interface temperatures
       real(r8), intent(in) :: tlayr(pcols,pverp)         ! K-1 level temperatures
       real(r8), intent(in) :: plol(pcols,pverp)          ! Ozone prs wghted path length
       real(r8), intent(in) :: plos(pcols,pverp)          ! Ozone path length
       real(r8), intent(in) :: pmln(pcols,pver)           ! Ln(pmidm1)
       real(r8), intent(in) :: piln(pcols,pverp)          ! Ln(pintm1)
       real(r8), intent(in) :: plh2ob(nbands,pcols,pverp) ! Pressure weighted h2o path with 
                                                          !    Hulst-Curtis-Godson temp. factor 
                                                          !    for H2O bands 
       real(r8), intent(in) :: wb(nbands,pcols,pverp)     ! H2o path length with 
                                                          !    Hulst-Curtis-Godson temp. factor 
                                                          !    for H2O bands 
    
    ! [fraction] absorbtion optical depth, cumulative from top
       real(r8), intent(in) :: odap_aer(pcols,pver,nlwbands)
    
    ! [fraction] Total transmission between interfaces k1 and k2
       real(r8), intent(in) :: aer_trn_ttl(pcols,pverp,pverp,nlwbands) 
    
    !
    ! Trace gas variables
    !
       real(r8), intent(in) :: co2mmr(pcols)              ! co2 column mean mass mixing ratio
       real(r8), intent(in) :: ucfc11(pcols,pverp)        ! CFC11 path length
       real(r8), intent(in) :: ucfc12(pcols,pverp)        ! CFC12 path length
       real(r8), intent(in) :: un2o0(pcols,pverp)         ! N2O path length
       real(r8), intent(in) :: un2o1(pcols,pverp)         ! N2O path length (hot band)
       real(r8), intent(in) :: uch4(pcols,pverp)          ! CH4 path length
       real(r8), intent(in) :: uco211(pcols,pverp)        ! CO2 9.4 micron band path length
       real(r8), intent(in) :: uco212(pcols,pverp)        ! CO2 9.4 micron band path length
       real(r8), intent(in) :: uco213(pcols,pverp)        ! CO2 9.4 micron band path length
       real(r8), intent(in) :: uco221(pcols,pverp)        ! CO2 10.4 micron band path length
       real(r8), intent(in) :: uco222(pcols,pverp)        ! CO2 10.4 micron band path length
       real(r8), intent(in) :: uco223(pcols,pverp)        ! CO2 10.4 micron band path length
       real(r8), intent(in) :: uptype(pcols,pverp)        ! continuum path length
       real(r8), intent(in) :: bn2o0(pcols,pverp)         ! pressure factor for n2o
       real(r8), intent(in) :: bn2o1(pcols,pverp)         ! pressure factor for n2o
       real(r8), intent(in) :: bch4(pcols,pverp)          ! pressure factor for ch4
       real(r8), intent(in) :: abplnk1(14,pcols,pverp)    ! non-nearest layer Planck factor
       real(r8), intent(in) :: abplnk2(14,pcols,pverp)    ! nearest layer factor
    !
    ! Output arguments
    !
       real(r8), intent(out) :: abstot(pcols,ntoplw:pverp,ntoplw:pverp) ! Total absorptivity
       real(r8), intent(out) :: absnxt(pcols,pver,4)      ! Total nearest layer absorptivity
    !
    !---------------------------Local variables-----------------------------
    !
       integer i                   ! Longitude index
       integer k                   ! Level index
       integer k1                  ! Level index
       integer k2                  ! Level index
       integer kn                  ! Nearest level index
       integer wvl                 ! Wavelength index
    
       real(r8) abstrc(pcols)              ! total trace gas absorptivity
       real(r8) bplnk(14,pcols,4)          ! Planck functions for sub-divided layers
       real(r8) pnew(pcols)        ! Effective pressure for H2O vapor linewidth
       real(r8) pnewb(nbands)      ! Effective pressure for h2o linewidth w/
                                   !    Hulst-Curtis-Godson correction for
                                   !    each band
       real(r8) u(pcols)           ! Pressure weighted H2O path length
       real(r8) ub(nbands)         ! Pressure weighted H2O path length with
                                   !    Hulst-Curtis-Godson correction for
                                   !    each band
       real(r8) tbar(pcols,4)      ! Mean layer temperature
       real(r8) emm(pcols,4)       ! Mean co2 emissivity
       real(r8) o3emm(pcols,4)     ! Mean o3 emissivity
       real(r8) o3bndi             ! Ozone band parameter
       real(r8) temh2o(pcols,4)    ! Mean layer temperature equivalent to tbar
       real(r8) k21                ! Exponential coefficient used to calculate
    !                              !  rotation band transmissvty in the 650-800
    !                              !  cm-1 region (tr1)
       real(r8) k22                ! Exponential coefficient used to calculate
    !                              !  rotation band transmissvty in the 500-650
    !                              !  cm-1 region (tr2)
       real(r8) uc1(pcols)         ! H2o continuum pathlength in 500-800 cm-1
       real(r8) to3h2o(pcols)      ! H2o trnsmsn for overlap with o3
       real(r8) pi                 ! For co2 absorptivity computation
       real(r8) sqti(pcols)        ! Used to store sqrt of mean temperature
       real(r8) sqti_tmp        ! Used to store sqrt of mean temperature
    
       real(r8) et                 ! Co2 hot band factor
       real(r8) et2                ! Co2 hot band factor squared
       real(r8) et4                ! Co2 hot band factor to fourth power
       real(r8) omet               ! Co2 stimulated emission term
       real(r8) f1co2              ! Co2 central band factor
       real(r8) f2co2(pcols)       ! Co2 weak band factor
       real(r8) f2co2_tmp       ! Co2 weak band factor
    
       real(r8) f3co2(pcols)       ! Co2 weak band factor
       real(r8) t1co2(pcols)       ! Overlap factr weak bands on strong band
       real(r8) sqwp               ! Sqrt of co2 pathlength
       real(r8) f1sqwp(pcols)      ! Main co2 band factor
       real(r8) oneme              ! Co2 stimulated emission term
       real(r8) alphat             ! Part of the co2 stimulated emission term
       real(r8) co2vmr(pcols)      ! CO2 column mean vmr
      ! real(r8) rmw                ! ratio of molecular weights (air/co2)
       real(r8) wco2               ! Constants used to define co2 pathlength
       real(r8) posqt              ! Effective pressure for co2 line width
       real(r8) u7(pcols)          ! Co2 hot band path length
       real(r8) u7_tmp          ! Co2 hot band path length
    
       real(r8) u8                 ! Co2 hot band path length
       real(r8) u9                 ! Co2 hot band path length
       real(r8) u13                ! Co2 hot band path length
       real(r8) rbeta7(pcols)      ! Inverse of co2 hot band line width par
       real(r8) rbeta7_tmp      ! Inverse of co2 hot band line width par
    
       real(r8) rbeta8             ! Inverse of co2 hot band line width par
       real(r8) rbeta9             ! Inverse of co2 hot band line width par
       real(r8) rbeta13            ! Inverse of co2 hot band line width par
       real(r8) tpatha             ! For absorptivity computation
       real(r8) abso(pcols,4)      ! Absorptivity for various gases/bands
       real(r8) dtx(pcols)         ! Planck temperature minus 250 K
       real(r8) dty(pcols)         ! Path temperature minus 250 K
       real(r8) term7_2     ! Kl_inf(i) in eq(r8) of table A3a of R&D
       real(r8) term8_2     ! Delta kl_inf(i) in eq(r8)
       real(r8) term7_1     ! Kl_inf(i) in eq(r8) of table A3a of R&D
       real(r8) term8_1     ! Delta kl_inf(i) in eq(r8)
       real(r8) tr1                ! Eqn(6) in table A2 of R&D for 650-800
       real(r8) tr10        ! Eqn (6) times eq(4) in table A2
    !                              !  of R&D for 500-650 cm-1 region
       real(r8) tr2                ! Eqn(6) in table A2 of R&D for 500-650
       real(r8) tr5                ! Eqn(4) in table A2 of R&D for 650-800
       real(r8) tr6                ! Eqn(4) in table A2 of R&D for 500-650
       real(r8) tr9         ! Equation (6) times eq(4) in table A2
    !                              !  of R&D for 650-800 cm-1 region
       real(r8) sqrtu(pcols)       ! Sqrt of pressure weighted h20 pathlength
       !real(r8) fwk(pcols)         ! Equation(33) in R&D far wing correction
       real(r8) fwku(pcols)        ! GU term in eqs(1) and (6) in table A2
       real(r8) to3co2(pcols)      ! P weighted temp in ozone band model
       real(r8) dpnm(pcols)        ! Pressure difference between two levels
       real(r8) pnmsq(pcols,pverp) ! Pressure squared
       real(r8) dw(pcols)          ! Amount of h2o between two levels
       real(r8) uinpl(pcols,4)     ! Nearest layer subdivision factor
       real(r8) winpl(pcols,4)     ! Nearest layer subdivision factor
       real(r8) zinpl(pcols,4)     ! Nearest layer subdivision factor
       real(r8) pinpl(pcols,4)     ! Nearest layer subdivision factor
       real(r8) dplh2o(pcols)      ! Difference in press weighted h2o amount
    
       real(r8) ds2c               ! Y in eq(7) in table A2 of R&D
       real(r8)  dplos             ! Ozone pathlength eq(A2) in R&Di
       real(r8) dplol              ! Presure weighted ozone pathlength
       real(r8) tlocal             ! Local interface temperature
       real(r8) beta               ! Ozone mean line parameter eq(A3) in R&Di
    !                               (includes Voigt line correction factor)
       real(r8) rphat              ! Effective pressure for ozone beta
       real(r8) tcrfac             ! Ozone temperature factor table 1 R&Di
       real(r8) tmp1               ! Ozone band factor see eq(A1) in R&Di
       real(r8) u1                 ! Effective ozone pathlength eq(A2) in R&Di
       real(r8) realnu             ! 1/beta factor in ozone band model eq(A1)
       real(r8) tmp2               ! Ozone band factor see eq(A1) in R&Di
       real(r8) u2                 ! Effective ozone pathlength eq(A2) in R&Di
       real(r8) rsqti              ! Reciprocal of sqrt of path temperature
       real(r8) tpath              ! Path temperature used in co2 band model
       real(r8) tmp3               ! Weak band factor see K&B
       real(r8) rdpnmsq            ! Reciprocal of difference in press^2
       real(r8) rdpnm              ! Reciprocal of difference in press
       real(r8) p1                 ! Mean pressure factor
       real(r8) p2                 ! Mean pressure factor
       real(r8) dtym10             ! T - 260 used in eq(9) and (10) table A3a
       real(r8) dplco2             ! Co2 path length
       real(r8) te                 ! A_0 T factor in ozone model table 1 of R&Di
       real(r8) denom              ! Denominator in eq(r8) of table A3a of R&D
       real(r8) th2o(pcols)        ! transmission due to H2O
       real(r8) tco2(pcols)        ! transmission due to CO2
       real(r8) to3(pcols)         ! transmission due to O3
    !
    ! Transmission terms for various spectral intervals:
    !
       real(r8) trab2(pcols)       ! H2o   500 -  800 cm-1
       real(r8) absbnd             ! Proportional to co2 band absorptance
       real(r8) dbvtit(pcols,pverp)! Intrfc drvtv plnck fnctn for o3
       real(r8) dbvtly(pcols,pver) ! Level drvtv plnck fnctn for o3
    !
    ! Variables for Collins/Hackney/Edwards (C/H/E) & 
    !       Collins/Lee-Taylor/Edwards (C/LT/E) H2O parameterization
    
    !
    ! Notation:
    ! U   = integral (P/P_0 dW)  eq. 15 in Ramanathan/Downey 1986
    ! P   = atmospheric pressure
    ! P_0 = reference atmospheric pressure
    ! W   = precipitable water path
    ! T_e = emission temperature
    ! T_p = path temperature
    ! RH  = path relative humidity
    !
       real(r8) fa               ! asymptotic value of abs. as U->infinity
       real(r8) a_star           ! normalized absorptivity for non-window
       real(r8) l_star           ! interpolated line transmission
       real(r8) c_star           ! interpolated continuum transmission
    
       real(r8) te1              ! emission temperature
       real(r8) te2              ! te^2
       real(r8) te3              ! te^3
       real(r8) te4              ! te^4
       real(r8) te5              ! te^5
    
       real(r8) log_u            ! log base 10 of U 
       real(r8) log_uc           ! log base 10 of H2O continuum path
       real(r8) log_p            ! log base 10 of P
       real(r8) t_p              ! T_p
       real(r8) t_e              ! T_e (offset by T_p)
    
       integer iu                ! index for log10(U)
       integer iu1               ! iu + 1
       integer iuc               ! index for log10(H2O continuum path)
       integer iuc1              ! iuc + 1
       integer ip                ! index for log10(P)
       integer ip1               ! ip + 1
       integer itp               ! index for T_p
       integer itp1              ! itp + 1
       integer ite               ! index for T_e
       integer ite1              ! ite + 1
       integer irh               ! index for RH
       integer irh1              ! irh + 1
    
       real(r8) dvar             ! normalized variation in T_p/T_e/P/U
       real(r8) uvar             ! U * diffusivity factor
       real(r8) uscl             ! factor for lineary scaling as U->0
    
       real(r8) wu               ! weight for U
       real(r8) wu1              ! 1 - wu
       real(r8) wuc              ! weight for H2O continuum path
       real(r8) wuc1             ! 1 - wuc
       real(r8) wp               ! weight for P
       real(r8) wp1              ! 1 - wp
       real(r8) wtp              ! weight for T_p
       real(r8) wtp1             ! 1 - wtp
       real(r8) wte              ! weight for T_e
       real(r8) wte1             ! 1 - wte
       real(r8) wrh              ! weight for RH
       real(r8) wrh1             ! 1 - wrh
    
       real(r8) w_0_0_           ! weight for Tp/Te combination
       real(r8) w_0_1_           ! weight for Tp/Te combination
       real(r8) w_1_0_           ! weight for Tp/Te combination
       real(r8) w_1_1_           ! weight for Tp/Te combination
    
       real(r8) w_0_00           ! weight for Tp/Te/RH combination
       real(r8) w_0_01           ! weight for Tp/Te/RH combination
       real(r8) w_0_10           ! weight for Tp/Te/RH combination
       real(r8) w_0_11           ! weight for Tp/Te/RH combination
       real(r8) w_1_00           ! weight for Tp/Te/RH combination
       real(r8) w_1_01           ! weight for Tp/Te/RH combination
       real(r8) w_1_10           ! weight for Tp/Te/RH combination
       real(r8) w_1_11           ! weight for Tp/Te/RH combination
    
       real(r8) w00_00           ! weight for P/Tp/Te/RH combination
       real(r8) w00_01           ! weight for P/Tp/Te/RH combination
       real(r8) w00_10           ! weight for P/Tp/Te/RH combination
       real(r8) w00_11           ! weight for P/Tp/Te/RH combination
       real(r8) w01_00           ! weight for P/Tp/Te/RH combination
       real(r8) w01_01           ! weight for P/Tp/Te/RH combination
       real(r8) w01_10           ! weight for P/Tp/Te/RH combination
       real(r8) w01_11           ! weight for P/Tp/Te/RH combination
       real(r8) w10_00           ! weight for P/Tp/Te/RH combination
       real(r8) w10_01           ! weight for P/Tp/Te/RH combination
       real(r8) w10_10           ! weight for P/Tp/Te/RH combination
       real(r8) w10_11           ! weight for P/Tp/Te/RH combination
       real(r8) w11_00           ! weight for P/Tp/Te/RH combination
       real(r8) w11_01           ! weight for P/Tp/Te/RH combination
       real(r8) w11_10           ! weight for P/Tp/Te/RH combination
       real(r8) w11_11           ! weight for P/Tp/Te/RH combination
    
       integer ib                ! spectral interval:
                                 !   1 = 0-800 cm^-1 and 1200-2200 cm^-1
                                 !   2 = 800-1200 cm^-1
    
    
       real(r8) pch2o            ! H2O continuum path
       real(r8) fch2o            ! temp. factor for continuum
       real(r8) uch2o            ! U corresponding to H2O cont. path (window)
    
    
       real(r8) esx              ! saturation vapor pressure returned by qsat
       real(r8) qsx              ! saturation mixing ratio returned by qsat
       real(r8) pnew_mks         ! pnew in MKS units
       real(r8) q_path           ! effective specific humidity along path
       real(r8) rh_path          ! effective relative humidity along path
    
          integer bnd_idx        ! LW band index
          real(r8) aer_pth_dlt   ! [kg m-2] STRAER path between interface levels k1 and k2
          real(r8) aer_pth_ngh(pcols)
                                 ! [kg m-2] STRAER path between neighboring layers
          real(r8) odap_aer_ttl  ! [fraction] Total path absorption optical depth
          real(r8) aer_trn_ngh(pcols,nlwbands) 
                                 ! [fraction] Total transmission between 
                                 !            nearest neighbor sub-levels
    !
    !--------------------------Statement function---------------------------
    !
       real(r8) dbvt,t             ! Planck fnctn tmp derivative for o3
    !
       dbvt(t)=(-2.8911366682e-4_r8+(2.3771251896e-6_r8+1.1305188929e-10_r8*t)*t)/ &
          (1.0_r8+(-6.1364820707e-3_r8+1.5550319767e-5_r8*t)*t)
    !
    !
    !-----------------------------------------------------------------------
    !
    ! Initialize
    !
       do k2=1,4
          do k1=1,ntoplw-1
             !absnxt(:,k1,k2) = posinf    ! set unused portions for lf95 restart write
          end do
       end do
    
       do k=ntoplw,pverp
          !abstot(:,k,k) = posinf         ! set unused portions for lf95 restart write
       end do
    
       do k=ntoplw,pver
          do i=1,ncol
             dbvtly(i,k) = dbvt(tlayr(i,k+1))
             dbvtit(i,k) = dbvt(tint(i,k))
          end do
       end do
     !  rmw = amd/amco2
       do i=1,ncol
          dbvtit(i,pverp) = dbvt(tint(i,pverp))
          co2vmr(i) = co2mmr(i) * rmw
       end do
    !
    
    
       do k=ntoplw,pverp
          do i=1,ncol
             pnmsq(i,k) = pnm(i,k)**2
            ! dtx(i) = tplnka(i,k) - 250._r8 !这里是算了很多次？？
          end do
       end do
    !
    ! Non-nearest layer level loops
    !$acc parallel loop collapse( 2 )
       do k1=pverp,ntoplw,-1
          do k2=pverp,ntoplw,-1
             if (k1 == k2) cycle
             do i=1,ncol
                !ASC-Y00 这个地方实在弄不了了 TODO
                dplh2o(i) = plh2o(i,k1) - plh2o(i,k2)
                u(i)      = abs(dplh2o(i))
                sqrtu(i)  = sqrt(u(i))
                ds2c      = abs(s2c(i,k1) - s2c(i,k2))
                dw(i)     = abs(w(i,k1) - w(i,k2))
                uc1(i)    = (ds2c + 1.7e-3_r8*u(i))*(1._r8 +  2._r8*ds2c)/(1._r8 + 15._r8*ds2c)
                pch2o     = ds2c
                pnew(i)   = u(i)/dw(i)
                pnew_mks  = pnew(i) * sslp_mks
    
                tpatha = abs(tcg(i,k1) - tcg(i,k2))/dw(i)
                t_p = min(max(tpatha, min_tp_h2o), max_tp_h2o)
                call qsat_water(t_p, pnew_mks, esx, qsx)
    
                q_path = dw(i) / abs(pnm(i,k1) - pnm(i,k2)) / rga
    
                ub(1) = abs(plh2ob(1,i,k1) - plh2ob(1,i,k2)) / psi(t_p,1)
                ub(2) = abs(plh2ob(2,i,k1) - plh2ob(2,i,k2)) / psi(t_p,2)
                
                pnewb(1) = ub(1) / abs(wb(1,i,k1) - wb(1,i,k2)) * phi(t_p,1)
                pnewb(2) = ub(2) / abs(wb(2,i,k1) - wb(2,i,k2)) * phi(t_p,2)
    
                dtx(i)      = tplnka(i,k2) - 250._r8
                dty(i)      = tpatha       - 250._r8
    
                fwku(i) = (fwcoef + fwc1/(1._r8 + fwc2*u(i)))*u(i)
    
                te1  = tplnka(i,k2)
                te2  = te1 * te1
                te3  = te2 * te1
                te4  = te3 * te1
                te5  = te4 * te1
    
                dvar = (t_p - min_tp_h2o) / dtp_h2o
                itp = min(max(int(aint(dvar,r8)) + 1, 1), n_tp - 1)
                itp1 = itp + 1
                wtp = dvar - floor(dvar)
                wtp1 = 1.0_r8 - wtp
                
                t_e = min(max(tplnka(i,k2)-t_p, min_te_h2o), max_te_h2o)
                dvar = (t_e - min_te_h2o) / dte_h2o
                ite = min(max(int(aint(dvar,r8)) + 1, 1), n_te - 1)
                ite1 = ite + 1
                wte = dvar - floor(dvar)
                wte1 = 1.0_r8 - wte
                
                rh_path = min(max(q_path / qsx, min_rh_h2o), max_rh_h2o)
                dvar = (rh_path - min_rh_h2o) / drh_h2o
                irh = min(max(int(aint(dvar,r8)) + 1, 1), n_rh - 1)
                irh1 = irh + 1
                wrh = dvar - floor(dvar)
                wrh1 = 1.0_r8 - wrh
    
                w_0_0_ = wtp  * wte
                w_0_1_ = wtp  * wte1
                w_1_0_ = wtp1 * wte 
                w_1_1_ = wtp1 * wte1
                
                w_0_00 = w_0_0_ * wrh
                w_0_01 = w_0_0_ * wrh1
                w_0_10 = w_0_1_ * wrh
                w_0_11 = w_0_1_ * wrh1
                w_1_00 = w_1_0_ * wrh
                w_1_01 = w_1_0_ * wrh1
                w_1_10 = w_1_1_ * wrh
                w_1_11 = w_1_1_ * wrh1
    
                fch2o = fh2oself(t_p) 
                uch2o = (pch2o * epsilo) / (q_path * fch2o)
    
    
                ib = 1
    
                uvar = ub(ib) * fdif
                log_u  = min(log10(max(uvar, min_u_h2o)), max_lu_h2o)
                dvar = (log_u - min_lu_h2o) / dlu_h2o
                iu = min(max(int(aint(dvar,r8)) + 1, 1), n_u - 1)
                iu1 = iu + 1
                wu = dvar - floor(dvar)
                wu1 = 1.0_r8 - wu
                
                log_p  = min(log10(max(pnewb(ib), min_p_h2o)), max_lp_h2o)
                dvar = (log_p - min_lp_h2o) / dlp_h2o
                ip = min(max(int(aint(dvar,r8)) + 1, 1), n_p - 1)
                ip1 = ip + 1
                wp = dvar - floor(dvar)
                wp1 = 1.0_r8 - wp
             
                w00_00 = wp  * w_0_00 
                w00_01 = wp  * w_0_01 
                w00_10 = wp  * w_0_10 
                w00_11 = wp  * w_0_11 
                w01_00 = wp  * w_1_00 
                w01_01 = wp  * w_1_01 
                w01_10 = wp  * w_1_10 
                w01_11 = wp  * w_1_11 
                w10_00 = wp1 * w_0_00 
                w10_01 = wp1 * w_0_01 
                w10_10 = wp1 * w_0_10 
                w10_11 = wp1 * w_0_11 
                w11_00 = wp1 * w_1_00 
                w11_01 = wp1 * w_1_01 
                w11_10 = wp1 * w_1_10 
                w11_11 = wp1 * w_1_11 
    
                fa = fat(1,ib) + &
                     fat(2,ib) * te1 + &
                     fat(3,ib) * te2 + &
                     fat(4,ib) * te3 + &
                     fat(5,ib) * te4 + &
                     fat(6,ib) * te5
    
                a_star = &
                     ah2onw(ip , itp , iu , ite , irh ) * w11_11 * wu1 + &
                     ah2onw(ip , itp , iu , ite , irh1) * w11_10 * wu1 + &
                     ah2onw(ip , itp , iu , ite1, irh ) * w11_01 * wu1 + &
                     ah2onw(ip , itp , iu , ite1, irh1) * w11_00 * wu1 + &
                     ah2onw(ip , itp , iu1, ite , irh ) * w11_11 * wu  + &
                     ah2onw(ip , itp , iu1, ite , irh1) * w11_10 * wu  + &
                     ah2onw(ip , itp , iu1, ite1, irh ) * w11_01 * wu  + &
                     ah2onw(ip , itp , iu1, ite1, irh1) * w11_00 * wu  + &
                     ah2onw(ip , itp1, iu , ite , irh ) * w10_11 * wu1 + &
                     ah2onw(ip , itp1, iu , ite , irh1) * w10_10 * wu1 + &
                     ah2onw(ip , itp1, iu , ite1, irh ) * w10_01 * wu1 + &
                     ah2onw(ip , itp1, iu , ite1, irh1) * w10_00 * wu1 + &
                     ah2onw(ip , itp1, iu1, ite , irh ) * w10_11 * wu  + &
                     ah2onw(ip , itp1, iu1, ite , irh1) * w10_10 * wu  + &
                     ah2onw(ip , itp1, iu1, ite1, irh ) * w10_01 * wu  + &
                     ah2onw(ip , itp1, iu1, ite1, irh1) * w10_00 * wu  + &
                     ah2onw(ip1, itp , iu , ite , irh ) * w01_11 * wu1 + &
                     ah2onw(ip1, itp , iu , ite , irh1) * w01_10 * wu1 + &
                     ah2onw(ip1, itp , iu , ite1, irh ) * w01_01 * wu1 + &
                     ah2onw(ip1, itp , iu , ite1, irh1) * w01_00 * wu1 + &
                     ah2onw(ip1, itp , iu1, ite , irh ) * w01_11 * wu  + &
                     ah2onw(ip1, itp , iu1, ite , irh1) * w01_10 * wu  + &
                     ah2onw(ip1, itp , iu1, ite1, irh ) * w01_01 * wu  + &
                     ah2onw(ip1, itp , iu1, ite1, irh1) * w01_00 * wu  + &
                     ah2onw(ip1, itp1, iu , ite , irh ) * w00_11 * wu1 + &
                     ah2onw(ip1, itp1, iu , ite , irh1) * w00_10 * wu1 + &
                     ah2onw(ip1, itp1, iu , ite1, irh ) * w00_01 * wu1 + &
                     ah2onw(ip1, itp1, iu , ite1, irh1) * w00_00 * wu1 + &
                     ah2onw(ip1, itp1, iu1, ite , irh ) * w00_11 * wu  + &
                     ah2onw(ip1, itp1, iu1, ite , irh1) * w00_10 * wu  + &
                     ah2onw(ip1, itp1, iu1, ite1, irh ) * w00_01 * wu  + &
                     ah2onw(ip1, itp1, iu1, ite1, irh1) * w00_00 * wu 
                abso(i,ib) = min(max(fa * (1.0_r8 - (1.0_r8 - a_star) * &
                                     aer_trn_ttl(i,k1,k2,ib)), &
                                 0.0_r8), 1.0_r8)
    
                if (uvar < min_u_h2o) then
                   uscl = uvar / min_u_h2o
                   abso(i,ib) = abso(i,ib) * uscl
                endif
                             
    
                ib = 2
    
                uvar = ub(ib) * fdif
                log_u  = min(log10(max(uvar, min_u_h2o)), max_lu_h2o)
                dvar = (log_u - min_lu_h2o) / dlu_h2o
                iu = min(max(int(aint(dvar,r8)) + 1, 1), n_u - 1)
                iu1 = iu + 1
                wu = dvar - floor(dvar)
                wu1 = 1.0_r8 - wu
                
                log_p  = min(log10(max(pnewb(ib), min_p_h2o)), max_lp_h2o)
                dvar = (log_p - min_lp_h2o) / dlp_h2o
                ip = min(max(int(aint(dvar,r8)) + 1, 1), n_p - 1)
                ip1 = ip + 1
                wp = dvar - floor(dvar)
                wp1 = 1.0_r8 - wp
             
                w00_00 = wp  * w_0_00 
                w00_01 = wp  * w_0_01 
                w00_10 = wp  * w_0_10 
                w00_11 = wp  * w_0_11 
                w01_00 = wp  * w_1_00 
                w01_01 = wp  * w_1_01 
                w01_10 = wp  * w_1_10 
                w01_11 = wp  * w_1_11 
                w10_00 = wp1 * w_0_00 
                w10_01 = wp1 * w_0_01 
                w10_10 = wp1 * w_0_10 
                w10_11 = wp1 * w_0_11 
                w11_00 = wp1 * w_1_00 
                w11_01 = wp1 * w_1_01 
                w11_10 = wp1 * w_1_10 
                w11_11 = wp1 * w_1_11 
    
                log_uc  = min(log10(max(uch2o * fdif, min_u_h2o)), max_lu_h2o)
                dvar = (log_uc - min_lu_h2o) / dlu_h2o
                iuc = min(max(int(aint(dvar,r8)) + 1, 1), n_u - 1)
                iuc1 = iuc + 1
                wuc = dvar - floor(dvar)
                wuc1 = 1.0_r8 - wuc
    
                fa = fat(1,ib) + &
                     fat(2,ib) * te1 + &
                     fat(3,ib) * te2 + &
                     fat(4,ib) * te3 + &
                     fat(5,ib) * te4 + &
                     fat(6,ib) * te5
    
                l_star = &
                     ln_ah2ow(ip , itp , iu , ite , irh ) * w11_11 * wu1 + &
                     ln_ah2ow(ip , itp , iu , ite , irh1) * w11_10 * wu1 + &
                     ln_ah2ow(ip , itp , iu , ite1, irh ) * w11_01 * wu1 + &
                     ln_ah2ow(ip , itp , iu , ite1, irh1) * w11_00 * wu1 + &
                     ln_ah2ow(ip , itp , iu1, ite , irh ) * w11_11 * wu  + &
                     ln_ah2ow(ip , itp , iu1, ite , irh1) * w11_10 * wu  + &
                     ln_ah2ow(ip , itp , iu1, ite1, irh ) * w11_01 * wu  + &
                     ln_ah2ow(ip , itp , iu1, ite1, irh1) * w11_00 * wu  + &
                     ln_ah2ow(ip , itp1, iu , ite , irh ) * w10_11 * wu1 + &
                     ln_ah2ow(ip , itp1, iu , ite , irh1) * w10_10 * wu1 + &
                     ln_ah2ow(ip , itp1, iu , ite1, irh ) * w10_01 * wu1 + &
                     ln_ah2ow(ip , itp1, iu , ite1, irh1) * w10_00 * wu1 + &
                     ln_ah2ow(ip , itp1, iu1, ite , irh ) * w10_11 * wu  + &
                     ln_ah2ow(ip , itp1, iu1, ite , irh1) * w10_10 * wu  + &
                     ln_ah2ow(ip , itp1, iu1, ite1, irh ) * w10_01 * wu  + &
                     ln_ah2ow(ip , itp1, iu1, ite1, irh1) * w10_00 * wu  + &
                     ln_ah2ow(ip1, itp , iu , ite , irh ) * w01_11 * wu1 + &
                     ln_ah2ow(ip1, itp , iu , ite , irh1) * w01_10 * wu1 + &
                     ln_ah2ow(ip1, itp , iu , ite1, irh ) * w01_01 * wu1 + &
                     ln_ah2ow(ip1, itp , iu , ite1, irh1) * w01_00 * wu1 + &
                     ln_ah2ow(ip1, itp , iu1, ite , irh ) * w01_11 * wu  + &
                     ln_ah2ow(ip1, itp , iu1, ite , irh1) * w01_10 * wu  + &
                     ln_ah2ow(ip1, itp , iu1, ite1, irh ) * w01_01 * wu  + &
                     ln_ah2ow(ip1, itp , iu1, ite1, irh1) * w01_00 * wu  + &
                     ln_ah2ow(ip1, itp1, iu , ite , irh ) * w00_11 * wu1 + &
                     ln_ah2ow(ip1, itp1, iu , ite , irh1) * w00_10 * wu1 + &
                     ln_ah2ow(ip1, itp1, iu , ite1, irh ) * w00_01 * wu1 + &
                     ln_ah2ow(ip1, itp1, iu , ite1, irh1) * w00_00 * wu1 + &
                     ln_ah2ow(ip1, itp1, iu1, ite , irh ) * w00_11 * wu  + &
                     ln_ah2ow(ip1, itp1, iu1, ite , irh1) * w00_10 * wu  + &
                     ln_ah2ow(ip1, itp1, iu1, ite1, irh ) * w00_01 * wu  + &
                     ln_ah2ow(ip1, itp1, iu1, ite1, irh1) * w00_00 * wu 
    
                c_star = &
                     cn_ah2ow(ip , itp , iuc , ite , irh ) * w11_11 * wuc1 + &
                     cn_ah2ow(ip , itp , iuc , ite , irh1) * w11_10 * wuc1 + &
                     cn_ah2ow(ip , itp , iuc , ite1, irh ) * w11_01 * wuc1 + &
                     cn_ah2ow(ip , itp , iuc , ite1, irh1) * w11_00 * wuc1 + &
                     cn_ah2ow(ip , itp , iuc1, ite , irh ) * w11_11 * wuc  + &
                     cn_ah2ow(ip , itp , iuc1, ite , irh1) * w11_10 * wuc  + &
                     cn_ah2ow(ip , itp , iuc1, ite1, irh ) * w11_01 * wuc  + &
                     cn_ah2ow(ip , itp , iuc1, ite1, irh1) * w11_00 * wuc  + &
                     cn_ah2ow(ip , itp1, iuc , ite , irh ) * w10_11 * wuc1 + &
                     cn_ah2ow(ip , itp1, iuc , ite , irh1) * w10_10 * wuc1 + &
                     cn_ah2ow(ip , itp1, iuc , ite1, irh ) * w10_01 * wuc1 + &
                     cn_ah2ow(ip , itp1, iuc , ite1, irh1) * w10_00 * wuc1 + &
                     cn_ah2ow(ip , itp1, iuc1, ite , irh ) * w10_11 * wuc  + &
                     cn_ah2ow(ip , itp1, iuc1, ite , irh1) * w10_10 * wuc  + &
                     cn_ah2ow(ip , itp1, iuc1, ite1, irh ) * w10_01 * wuc  + &
                     cn_ah2ow(ip , itp1, iuc1, ite1, irh1) * w10_00 * wuc  + &
                     cn_ah2ow(ip1, itp , iuc , ite , irh ) * w01_11 * wuc1 + &
                     cn_ah2ow(ip1, itp , iuc , ite , irh1) * w01_10 * wuc1 + &
                     cn_ah2ow(ip1, itp , iuc , ite1, irh ) * w01_01 * wuc1 + &
                     cn_ah2ow(ip1, itp , iuc , ite1, irh1) * w01_00 * wuc1 + &
                     cn_ah2ow(ip1, itp , iuc1, ite , irh ) * w01_11 * wuc  + &
                     cn_ah2ow(ip1, itp , iuc1, ite , irh1) * w01_10 * wuc  + &
                     cn_ah2ow(ip1, itp , iuc1, ite1, irh ) * w01_01 * wuc  + &
                     cn_ah2ow(ip1, itp , iuc1, ite1, irh1) * w01_00 * wuc  + &
                     cn_ah2ow(ip1, itp1, iuc , ite , irh ) * w00_11 * wuc1 + &
                     cn_ah2ow(ip1, itp1, iuc , ite , irh1) * w00_10 * wuc1 + &
                     cn_ah2ow(ip1, itp1, iuc , ite1, irh ) * w00_01 * wuc1 + &
                     cn_ah2ow(ip1, itp1, iuc , ite1, irh1) * w00_00 * wuc1 + &
                     cn_ah2ow(ip1, itp1, iuc1, ite , irh ) * w00_11 * wuc  + &
                     cn_ah2ow(ip1, itp1, iuc1, ite , irh1) * w00_10 * wuc  + &
                     cn_ah2ow(ip1, itp1, iuc1, ite1, irh ) * w00_01 * wuc  + &
                     cn_ah2ow(ip1, itp1, iuc1, ite1, irh1) * w00_00 * wuc 
                abso(i,ib) = min(max(fa * (1.0_r8 - l_star * c_star * &
                                     aer_trn_ttl(i,k1,k2,ib)), &
                                 0.0_r8), 1.0_r8) 
    
                if (uvar < min_u_h2o) then
                   uscl = uvar / min_u_h2o
                   abso(i,ib) = abso(i,ib) * uscl
                endif
    
             end do
    
             do i=1,ncol
                term7_1 = coefj(1,1) + coefj(2,1)*dty(i)*(1._r8 + c16*dty(i))
                term8_1 = coefk(1,1) + coefk(2,1)*dty(i)*(1._r8 + c17*dty(i))
                term7_2 = coefj(1,2) + coefj(2,2)*dty(i)*(1._r8 + c26*dty(i))
                term8_2 = coefk(1,2) + coefk(2,2)*dty(i)*(1._r8 + c27*dty(i))
    
                k21    = term7_1 + term8_1/ &
                   (1._r8 + (c30 + c31*(dty(i)-10._r8)*(dty(i)-10._r8))*sqrtu(i))
                k22    = term7_2 + term8_2/ &
                   (1._r8 + (c28 + c29*(dty(i)-10._r8))*sqrtu(i))
                tr1    = exp(-(k21*(sqrtu(i) + fc1*fwku(i))))
                tr2    = exp(-(k22*(sqrtu(i) + fc1*fwku(i))))
                tr1=tr1*aer_trn_ttl(i,k1,k2,idx_LW_0650_0800) 
                tr2=tr2*aer_trn_ttl(i,k1,k2,idx_LW_0500_0650)
                tr5    = exp(-((coefh(1,3) + coefh(2,3)*dtx(i))*uc1(i)))
                tr6    = exp(-((coefh(1,4) + coefh(2,4)*dtx(i))*uc1(i)))
                tr9   = tr1*tr5
                tr10  = tr2*tr6
                th2o(i) = tr10
                trab2(i) = 0.65_r8*tr9 + 0.35_r8*tr10
             end do
             if (k2 < k1) then
                do i=1,ncol
                   to3h2o(i) = h2otr(i,k1)/h2otr(i,k2)
                end do
             else
                do i=1,ncol
                   to3h2o(i) = h2otr(i,k2)/h2otr(i,k1)
                end do
             end if
             
             do i=1,ncol
                dpnm(i)  = pnm(i,k1) - pnm(i,k2)
                to3co2(i) = (pnm(i,k1)*co2t(i,k1) - pnm(i,k2)*co2t(i,k2))/dpnm(i)
                te       = (to3co2(i)*r293)**.7_r8
                dplos    = plos(i,k1) - plos(i,k2)
                if (dplos == 0._r8) then
                  abso(i,3) = 0._r8
                  to3(i) = 1._r8
                 ! write(iulog,*) 'radiation ozone error  ',k1,k2,plos(i,k1)
                else 
                  dplol    = plol(i,k1) - plol(i,k2)
                  u1       = 18.29_r8*abs(dplos)/te
                  u2       = .5649_r8*abs(dplos)/te
                  rphat    = dplol/dplos
                  tlocal   = tint(i,k2)
                  tcrfac   = sqrt(tlocal*r250)*te
                  beta     = r3205*(rphat + dpfo3*tcrfac)
                  realnu   = te/beta
                  tmp1     = u1/sqrt(4._r8 + u1*(1._r8 + realnu))
                  tmp2     = u2/sqrt(4._r8 + u2*(1._r8 + realnu))
                  o3bndi    = 74._r8*te*log(1._r8 + tmp1 + tmp2)
                  abso(i,3) = o3bndi*to3h2o(i)*dbvtit(i,k2)
                  to3(i)   = 1.0_r8/(1._r8 + 0.1_r8*tmp1 + 0.1_r8*tmp2)
                endif
             end do
    
             do i=1,ncol
                sqwp      = sqrt(abs(plco2(i,k1) - plco2(i,k2)))
                et        = exp(-480._r8/to3co2(i))
                sqti(i)   = sqrt(to3co2(i))
                rsqti     = 1._r8/sqti(i)
                et2       = et*et
                et4       = et2*et2
                omet      = 1._r8 - 1.5_r8*et2
                f1co2     = 899.70_r8*omet*(1._r8 + 1.94774_r8*et + 4.73486_r8*et2)*rsqti
                f1sqwp(i) = f1co2*sqwp
                t1co2(i)  = 1._r8/(1._r8 + (245.18_r8*omet*sqwp*rsqti))
                oneme     = 1._r8 - et2
                alphat    = oneme**3*rsqti
                pi        = abs(dpnm(i))
                wco2      =  2.5221_r8*co2vmr(i)*pi*rga
                u7(i)     =  4.9411e4_r8*alphat*et2*wco2
                u8        =  3.9744e4_r8*alphat*et4*wco2
                u9        =  1.0447e5_r8*alphat*et4*et2*wco2
                u13       = 2.8388e3_r8*alphat*et4*wco2
                tpath     = to3co2(i)
                tlocal    = tint(i,k2)
                tcrfac    = sqrt(tlocal*r250*tpath*r300)
                posqt     = ((pnm(i,k2) + pnm(i,k1))*r2sslp + dpfco2*tcrfac)*rsqti
                rbeta7(i) = 1._r8/(5.3228_r8*posqt)
                rbeta8    = 1._r8/(10.6576_r8*posqt)
                rbeta9    = rbeta7(i)
                rbeta13   = rbeta9
                f2co2(i)  = (u7(i)/sqrt(4._r8 + u7(i)*(1._r8 + rbeta7(i)))) + &
                   (u8   /sqrt(4._r8 + u8*(1._r8 + rbeta8))) + &
                   (u9   /sqrt(4._r8 + u9*(1._r8 + rbeta9)))
                f3co2(i)  = u13/sqrt(4._r8 + u13*(1._r8 + rbeta13))
             end do
             if (k2 >= k1) then
                do i=1,ncol
                   sqti(i) = sqrt(tlayr(i,k2))
                end do
             end if
          !考虑把这两个循环合并，然后删掉 f2co2 f3co2 rbeta7 f1sqwp
             do i=1,ncol
                tmp1      = log(1._r8 + f1sqwp(i))
                tmp2      = log(1._r8 + f2co2(i))
                tmp3      = log(1._r8 + f3co2(i))
                absbnd    = (tmp1 + 2._r8*t1co2(i)*tmp2 + 2._r8*tmp3)*sqti(i)
                abso(i,4) = trab2(i)*co2em(i,k2)*absbnd
                tco2(i)   = 1._r8/(1.0_r8+10.0_r8*(u7(i)/sqrt(4._r8 + u7(i)*(1._r8 + rbeta7(i))))) !这个部分和L1044的重复了
             end do
    
             call trcab(ncol     ,                            &
                k1      ,k2      ,ucfc11  ,ucfc12  ,un2o0   , &
                un2o1   ,uch4    ,uco211  ,uco212  ,uco213  , &
                uco221  ,uco222  ,uco223  ,bn2o0   ,bn2o1   , &
                bch4    ,to3co2  ,pnm     ,dw      ,pnew    , &
                s2c     ,uptype  ,u       ,abplnk1 ,tco2    , &
                th2o    ,to3     ,abstrc  , &
                aer_trn_ttl)
    
             do i=1,ncol
                abstot(i,k1,k2) = abso(i,1) + abso(i,2) + &
                   abso(i,3) + abso(i,4) + abstrc(i)
             end do
          end do ! do k2 = 
       end do ! do k1 = 
    
    !$acc parallel loop
       do k2=pver,ntoplw,-1
          do i=1,ncol
             tbar(i,1)   = 0.5_r8*(tint(i,k2+1) + tlayr(i,k2+1))
             emm(i,1)    = 0.5_r8*(co2em(i,k2+1) + co2eml(i,k2))
             tbar(i,2)   = 0.5_r8*(tlayr(i,k2+1) + tint(i,k2))
             emm(i,2)    = 0.5_r8*(co2em(i,k2) + co2eml(i,k2))
             tbar(i,3)   = 0.5_r8*(tbar(i,2) + tbar(i,1))
             emm(i,3)    = emm(i,1)
             tbar(i,4)   = tbar(i,3)
             emm(i,4)    = emm(i,2)
             o3emm(i,1)  = 0.5_r8*(dbvtit(i,k2+1) + dbvtly(i,k2))
             o3emm(i,2)  = 0.5_r8*(dbvtit(i,k2) + dbvtly(i,k2))
             o3emm(i,3)  = o3emm(i,1)
             o3emm(i,4)  = o3emm(i,2)
             temh2o(i,1) = tbar(i,1)
             temh2o(i,2) = tbar(i,2)
             temh2o(i,3) = tbar(i,1)
             temh2o(i,4) = tbar(i,2)
             dpnm(i)     = pnm(i,k2+1) - pnm(i,k2) ! 这个可以拆除来
          end do
    
          do wvl = 1,14
             do i = 1,ncol
                bplnk(wvl,i,1) = 0.5_r8*(abplnk1(wvl,i,k2+1) + abplnk2(wvl,i,k2))
                bplnk(wvl,i,2) = 0.5_r8*(abplnk1(wvl,i,k2) + abplnk2(wvl,i,k2))
                bplnk(wvl,i,3) = bplnk(wvl,i,1)
                bplnk(wvl,i,4) = bplnk(wvl,i,2)
             end do
          end do
          
          do i=1,ncol
             rdpnmsq    = 1._r8/(pnmsq(i,k2+1) - pnmsq(i,k2))
             rdpnm      = 1._r8/dpnm(i)
             p1         = .5_r8*(pbr(i,k2) + pnm(i,k2+1))
             p2         = .5_r8*(pbr(i,k2) + pnm(i,k2  ))
             uinpl(i,1) =  (pnmsq(i,k2+1) - p1**2)*rdpnmsq
             uinpl(i,2) = -(pnmsq(i,k2  ) - p2**2)*rdpnmsq
             uinpl(i,3) = -(pnmsq(i,k2  ) - p1**2)*rdpnmsq
             uinpl(i,4) =  (pnmsq(i,k2+1) - p2**2)*rdpnmsq
             winpl(i,1) = (.5_r8*( pnm(i,k2+1) - pbr(i,k2)))*rdpnm
             winpl(i,2) = (.5_r8*(-pnm(i,k2  ) + pbr(i,k2)))*rdpnm
             winpl(i,3) = (.5_r8*( pnm(i,k2+1) + pbr(i,k2)) - pnm(i,k2  ))*rdpnm
             winpl(i,4) = (.5_r8*(-pnm(i,k2  ) - pbr(i,k2)) + pnm(i,k2+1))*rdpnm
             tmp1       = 1._r8/(piln(i,k2+1) - piln(i,k2))
             tmp2       = piln(i,k2+1) - pmln(i,k2)
             tmp3       = piln(i,k2  ) - pmln(i,k2)
             zinpl(i,1) = (.5_r8*tmp2          )*tmp1
             zinpl(i,2) = (        - .5_r8*tmp3)*tmp1
             zinpl(i,3) = (.5_r8*tmp2 -    tmp3)*tmp1
             zinpl(i,4) = (   tmp2 - .5_r8*tmp3)*tmp1
             pinpl(i,1) = 0.5_r8*(p1 + pnm(i,k2+1))
             pinpl(i,2) = 0.5_r8*(p2 + pnm(i,k2  ))
             pinpl(i,3) = 0.5_r8*(p1 + pnm(i,k2  ))
             pinpl(i,4) = 0.5_r8*(p2 + pnm(i,k2+1))
          end do
          do kn=1,4
             do i=1,ncol
                u(i)     = uinpl(i,kn)*abs(plh2o(i,k2) - plh2o(i,k2+1))
                sqrtu(i) = sqrt(u(i))
                dw(i)    = abs(w(i,k2) - w(i,k2+1))
                pnew(i)  = u(i)/(winpl(i,kn)*dw(i))
                pnew_mks  = pnew(i) * sslp_mks
                t_p = min(max(tbar(i,kn), min_tp_h2o), max_tp_h2o)
    
                call qsat_water(t_p, pnew_mks, esx, qsx)
    
                q_path = dw(i) / ABS(dpnm(i)) / rga
                
                ds2c     = abs(s2c(i,k2) - s2c(i,k2+1))
                uc1(i)   = uinpl(i,kn)*ds2c
                pch2o    = uc1(i)
                uc1(i)   = (uc1(i) + 1.7e-3_r8*u(i))*(1._r8 +  2._r8*uc1(i))/(1._r8 + 15._r8*uc1(i))
                dtx(i)      = temh2o(i,kn) - 250._r8
                dty(i)      = tbar(i,kn) - 250._r8
                
                fwku(i)   = (fwcoef + fwc1/(1._r8 + fwc2*u(i)))*u(i)
    
                aer_trn_ngh(i, 1:nlwbands)= &
                  exp(-fdif * uinpl(i,kn) * odap_aer(i, k2, 1:nlwbands ) )
    
                te1  = temh2o(i,kn)
                te2  = te1 * te1
                te3  = te2 * te1
                te4  = te3 * te1
                te5  = te4 * te1
    
                uvar = u(i)*fdif
                log_u  = min(log10(max(uvar, min_u_h2o)), max_lu_h2o)
                dvar = (log_u - min_lu_h2o) / dlu_h2o
                iu = min(max(int(aint(dvar,r8)) + 1, 1), n_u - 1)
                iu1 = iu + 1
                wu = dvar - floor(dvar)
                wu1 = 1.0_r8 - wu
                
                log_p  = min(log10(max(pnew(i), min_p_h2o)), max_lp_h2o)
                dvar = (log_p - min_lp_h2o) / dlp_h2o
                ip = min(max(int(aint(dvar,r8)) + 1, 1), n_p - 1)
                ip1 = ip + 1
                wp = dvar - floor(dvar)
                wp1 = 1.0_r8 - wp
                
                dvar = (t_p - min_tp_h2o) / dtp_h2o
                itp = min(max(int(aint(dvar,r8)) + 1, 1), n_tp - 1)
                itp1 = itp + 1
                wtp = dvar - floor(dvar)
                wtp1 = 1.0_r8 - wtp
                
                t_e = min(max(temh2o(i,kn)-t_p,min_te_h2o),max_te_h2o)
                dvar = (t_e - min_te_h2o) / dte_h2o
                ite = min(max(int(aint(dvar,r8)) + 1, 1), n_te - 1)
                ite1 = ite + 1
                wte = dvar - floor(dvar)
                wte1 = 1.0_r8 - wte
                
                rh_path = min(max(q_path / qsx, min_rh_h2o), max_rh_h2o)
                dvar = (rh_path - min_rh_h2o) / drh_h2o
                irh = min(max(int(aint(dvar,r8)) + 1, 1), n_rh - 1)
                irh1 = irh + 1
                wrh = dvar - floor(dvar)
                wrh1 = 1.0_r8 - wrh
                
                w_0_0_ = wtp  * wte
                w_0_1_ = wtp  * wte1
                w_1_0_ = wtp1 * wte 
                w_1_1_ = wtp1 * wte1
                
                w_0_00 = w_0_0_ * wrh
                w_0_01 = w_0_0_ * wrh1
                w_0_10 = w_0_1_ * wrh
                w_0_11 = w_0_1_ * wrh1
                w_1_00 = w_1_0_ * wrh
                w_1_01 = w_1_0_ * wrh1
                w_1_10 = w_1_1_ * wrh
                w_1_11 = w_1_1_ * wrh1
                
                w00_00 = wp  * w_0_00 
                w00_01 = wp  * w_0_01 
                w00_10 = wp  * w_0_10 
                w00_11 = wp  * w_0_11 
                w01_00 = wp  * w_1_00 
                w01_01 = wp  * w_1_01 
                w01_10 = wp  * w_1_10 
                w01_11 = wp  * w_1_11 
                w10_00 = wp1 * w_0_00 
                w10_01 = wp1 * w_0_01 
                w10_10 = wp1 * w_0_10 
                w10_11 = wp1 * w_0_11 
                w11_00 = wp1 * w_1_00 
                w11_01 = wp1 * w_1_01 
                w11_10 = wp1 * w_1_10 
                w11_11 = wp1 * w_1_11 
    
    
                ib = 1
                
                fa = fat(1,ib) + &
                     fat(2,ib) * te1 + &
                     fat(3,ib) * te2 + &
                     fat(4,ib) * te3 + &
                     fat(5,ib) * te4 + &
                     fat(6,ib) * te5
                
                a_star = &
                     ah2onw(ip , itp , iu , ite , irh ) * w11_11 * wu1 + &
                     ah2onw(ip , itp , iu , ite , irh1) * w11_10 * wu1 + &
                     ah2onw(ip , itp , iu , ite1, irh ) * w11_01 * wu1 + &
                     ah2onw(ip , itp , iu , ite1, irh1) * w11_00 * wu1 + &
                     ah2onw(ip , itp , iu1, ite , irh ) * w11_11 * wu  + &
                     ah2onw(ip , itp , iu1, ite , irh1) * w11_10 * wu  + &
                     ah2onw(ip , itp , iu1, ite1, irh ) * w11_01 * wu  + &
                     ah2onw(ip , itp , iu1, ite1, irh1) * w11_00 * wu  + &
                     ah2onw(ip , itp1, iu , ite , irh ) * w10_11 * wu1 + &
                     ah2onw(ip , itp1, iu , ite , irh1) * w10_10 * wu1 + &
                     ah2onw(ip , itp1, iu , ite1, irh ) * w10_01 * wu1 + &
                     ah2onw(ip , itp1, iu , ite1, irh1) * w10_00 * wu1 + &
                     ah2onw(ip , itp1, iu1, ite , irh ) * w10_11 * wu  + &
                     ah2onw(ip , itp1, iu1, ite , irh1) * w10_10 * wu  + &
                     ah2onw(ip , itp1, iu1, ite1, irh ) * w10_01 * wu  + &
                     ah2onw(ip , itp1, iu1, ite1, irh1) * w10_00 * wu  + &
                     ah2onw(ip1, itp , iu , ite , irh ) * w01_11 * wu1 + &
                     ah2onw(ip1, itp , iu , ite , irh1) * w01_10 * wu1 + &
                     ah2onw(ip1, itp , iu , ite1, irh ) * w01_01 * wu1 + &
                     ah2onw(ip1, itp , iu , ite1, irh1) * w01_00 * wu1 + &
                     ah2onw(ip1, itp , iu1, ite , irh ) * w01_11 * wu  + &
                     ah2onw(ip1, itp , iu1, ite , irh1) * w01_10 * wu  + &
                     ah2onw(ip1, itp , iu1, ite1, irh ) * w01_01 * wu  + &
                     ah2onw(ip1, itp , iu1, ite1, irh1) * w01_00 * wu  + &
                     ah2onw(ip1, itp1, iu , ite , irh ) * w00_11 * wu1 + &
                     ah2onw(ip1, itp1, iu , ite , irh1) * w00_10 * wu1 + &
                     ah2onw(ip1, itp1, iu , ite1, irh ) * w00_01 * wu1 + &
                     ah2onw(ip1, itp1, iu , ite1, irh1) * w00_00 * wu1 + &
                     ah2onw(ip1, itp1, iu1, ite , irh ) * w00_11 * wu  + &
                     ah2onw(ip1, itp1, iu1, ite , irh1) * w00_10 * wu  + &
                     ah2onw(ip1, itp1, iu1, ite1, irh ) * w00_01 * wu  + &
                     ah2onw(ip1, itp1, iu1, ite1, irh1) * w00_00 * wu
                
                abso(i,ib) = min(max(fa * (1.0_r8 - (1.0_r8 - a_star) * &
                                     aer_trn_ngh(i,ib)), &
                                 0.0_r8), 1.0_r8)
    
    
                if (uvar < min_u_h2o) then
                   uscl = uvar / min_u_h2o
                   abso(i,ib) = abso(i,ib) * uscl
                endif
                
    
                ib = 2
                
                fa = fat(1,ib) + &
                     fat(2,ib) * te1 + &
                     fat(3,ib) * te2 + &
                     fat(4,ib) * te3 + &
                     fat(5,ib) * te4 + &
                     fat(6,ib) * te5
                
                a_star = &
                     ah2ow(ip , itp , iu , ite , irh ) * w11_11 * wu1 + &
                     ah2ow(ip , itp , iu , ite , irh1) * w11_10 * wu1 + &
                     ah2ow(ip , itp , iu , ite1, irh ) * w11_01 * wu1 + &
                     ah2ow(ip , itp , iu , ite1, irh1) * w11_00 * wu1 + &
                     ah2ow(ip , itp , iu1, ite , irh ) * w11_11 * wu  + &
                     ah2ow(ip , itp , iu1, ite , irh1) * w11_10 * wu  + &
                     ah2ow(ip , itp , iu1, ite1, irh ) * w11_01 * wu  + &
                     ah2ow(ip , itp , iu1, ite1, irh1) * w11_00 * wu  + &
                     ah2ow(ip , itp1, iu , ite , irh ) * w10_11 * wu1 + &
                     ah2ow(ip , itp1, iu , ite , irh1) * w10_10 * wu1 + &
                     ah2ow(ip , itp1, iu , ite1, irh ) * w10_01 * wu1 + &
                     ah2ow(ip , itp1, iu , ite1, irh1) * w10_00 * wu1 + &
                     ah2ow(ip , itp1, iu1, ite , irh ) * w10_11 * wu  + &
                     ah2ow(ip , itp1, iu1, ite , irh1) * w10_10 * wu  + &
                     ah2ow(ip , itp1, iu1, ite1, irh ) * w10_01 * wu  + &
                     ah2ow(ip , itp1, iu1, ite1, irh1) * w10_00 * wu  + &
                     ah2ow(ip1, itp , iu , ite , irh ) * w01_11 * wu1 + &
                     ah2ow(ip1, itp , iu , ite , irh1) * w01_10 * wu1 + &
                     ah2ow(ip1, itp , iu , ite1, irh ) * w01_01 * wu1 + &
                     ah2ow(ip1, itp , iu , ite1, irh1) * w01_00 * wu1 + &
                     ah2ow(ip1, itp , iu1, ite , irh ) * w01_11 * wu  + &
                     ah2ow(ip1, itp , iu1, ite , irh1) * w01_10 * wu  + &
                     ah2ow(ip1, itp , iu1, ite1, irh ) * w01_01 * wu  + &
                     ah2ow(ip1, itp , iu1, ite1, irh1) * w01_00 * wu  + &
                     ah2ow(ip1, itp1, iu , ite , irh ) * w00_11 * wu1 + &
                     ah2ow(ip1, itp1, iu , ite , irh1) * w00_10 * wu1 + &
                     ah2ow(ip1, itp1, iu , ite1, irh ) * w00_01 * wu1 + &
                     ah2ow(ip1, itp1, iu , ite1, irh1) * w00_00 * wu1 + &
                     ah2ow(ip1, itp1, iu1, ite , irh ) * w00_11 * wu  + &
                     ah2ow(ip1, itp1, iu1, ite , irh1) * w00_10 * wu  + &
                     ah2ow(ip1, itp1, iu1, ite1, irh ) * w00_01 * wu  + &
                     ah2ow(ip1, itp1, iu1, ite1, irh1) * w00_00 * wu
                
                abso(i,ib) = min(max(fa * (1.0_r8 - (1.0_r8 - a_star) * &
                                     aer_trn_ngh(i,ib)), &
                                 0.0_r8), 1.0_r8)
    
    
                if (uvar < min_u_h2o) then
                   uscl = uvar / min_u_h2o
                   abso(i,ib) = abso(i,ib) * uscl
                endif
                
             end do
    
             do i=1,ncol
                term7_1 = coefj(1,1) + coefj(2,1)*dty(i)*(1._r8 + c16*dty(i))
                term8_1 = coefk(1,1) + coefk(2,1)*dty(i)*(1._r8 + c17*dty(i))
                term7_2 = coefj(1,2) + coefj(2,2)*dty(i)*(1._r8 + c26*dty(i))
                term8_2 = coefk(1,2) + coefk(2,2)*dty(i)*(1._r8 + c27*dty(i))
    
                dtym10     = dty(i) - 10._r8
                denom      = 1._r8 + (c30 + c31*dtym10*dtym10)*sqrtu(i)
                k21        = term7_1 + term8_1/denom
                denom      = 1._r8 + (c28 + c29*dtym10       )*sqrtu(i)
                k22        = term7_2 + term8_2/denom
                tr1     = exp(-(k21*(sqrtu(i) + fc1*fwku(i))))
                tr2     = exp(-(k22*(sqrtu(i) + fc1*fwku(i))))
                tr1=tr1*aer_trn_ngh(i,idx_LW_0650_0800) 
                                             ! H2O line+STRAER trn 650--800 cm-1
                tr2=tr2*aer_trn_ngh(i,idx_LW_0500_0650) 
                                             ! H2O line+STRAER trn 500--650 cm-1
                tr5     = exp(-((coefh(1,3) + coefh(2,3)*dtx(i))*uc1(i)))
                tr6     = exp(-((coefh(1,4) + coefh(2,4)*dtx(i))*uc1(i)))
                tr9  = tr1*tr5
                tr10 = tr2*tr6
                trab2(i)= 0.65_r8*tr9 + 0.35_r8*tr10
                th2o(i) = tr10
             end do
    
             do i=1,ncol
                te        = (tbar(i,kn)*r293)**.7_r8
                dplos     = abs(plos(i,k2+1) - plos(i,k2))
                u1        = zinpl(i,kn)*18.29_r8*dplos/te
                u2        = zinpl(i,kn)*.5649_r8*dplos/te
                tlocal    = tbar(i,kn)
                tcrfac    = sqrt(tlocal*r250)*te
                beta      = r3205*(pinpl(i,kn)*rsslp + dpfo3*tcrfac)
                realnu    = te/beta
                tmp1      = u1/sqrt(4._r8 + u1*(1._r8 + realnu))
                tmp2      = u2/sqrt(4._r8 + u2*(1._r8 + realnu))
                o3bndi    = 74._r8*te*log(1._r8 + tmp1 + tmp2)
                abso(i,3) = o3bndi*o3emm(i,kn)*(h2otr(i,k2+1)/h2otr(i,k2))
                to3(i)    = 1.0_r8/(1._r8 + 0.1_r8*tmp1 + 0.1_r8*tmp2)
             end do
    
             do i=1,ncol
                dplco2   = plco2(i,k2+1) - plco2(i,k2)
                sqwp     = sqrt(uinpl(i,kn)*dplco2)
                et       = exp(-480._r8/tbar(i,kn))
                sqti_tmp  = sqrt(tbar(i,kn))
                rsqti    = 1._r8/sqti_tmp
                et2      = et*et
                et4      = et2*et2
                omet     = (1._r8 - 1.5_r8*et2)
                f1co2    = 899.70_r8*omet*(1._r8 + 1.94774_r8*et + 4.73486_r8*et2)*rsqti
                oneme    = 1._r8 - et2
                alphat   = oneme**3*rsqti
                pi       = abs(dpnm(i))*winpl(i,kn)
                wco2     = 2.5221_r8*co2vmr(i)*pi*rga
                u7_tmp    = 4.9411e4_r8*alphat*et2*wco2
                u8       = 3.9744e4_r8*alphat*et4*wco2
                u9       = 1.0447e5_r8*alphat*et4*et2*wco2
                u13      = 2.8388e3_r8*alphat*et4*wco2
                tpath    = tbar(i,kn)
                tlocal   = tbar(i,kn)
                tcrfac   = sqrt((tlocal*r250)*(tpath*r300))
                posqt    = (pinpl(i,kn)*rsslp + dpfco2*tcrfac)*rsqti
                rbeta7_tmp= 1._r8/(5.3228_r8*posqt)
                rbeta8   = 1._r8/(10.6576_r8*posqt)
                rbeta9   = rbeta7_tmp
                rbeta13  = rbeta9
                f2co2_tmp = u7_tmp/sqrt(4._r8 + u7_tmp*(1._r8 + rbeta7_tmp)) + &
                     u8   /sqrt(4._r8 + u8*(1._r8 + rbeta8)) + &
                     u9   /sqrt(4._r8 + u9*(1._r8 + rbeta9))
                !f3co2(i) = u13/sqrt(4._r8 + u13*(1._r8 + rbeta13))
                tmp1     = log(1._r8 + f1co2*sqwp)
                tmp2     = log(1._r8 + f2co2_tmp)
                tmp3     = log(1._r8 + u13/sqrt(4._r8 + u13*(1._r8 + rbeta13)))
                absbnd   = (tmp1 + 2._r8*(1._r8/(1._r8 + (245.18_r8*omet*sqwp*rsqti)))*tmp2 + 2._r8*tmp3)*sqti_tmp
                abso(i,4)= trab2(i)*emm(i,kn)*absbnd
                tco2(i)  = 1.0_r8/(1.0_r8+ 10.0_r8*u7_tmp/sqrt(4._r8 + u7_tmp*(1._r8 + rbeta7_tmp)))
             end do ! do i =
    
             call trcabn(ncol      ,                            &
                  k2      ,kn      ,ucfc11  ,ucfc12  ,un2o0   , &
                  un2o1   ,uch4    ,uco211  ,uco212  ,uco213  , &
                  uco221  ,uco222  ,uco223  ,tbar    ,bplnk   , &
                  winpl   ,pinpl   ,tco2    ,th2o    ,to3     , &
                  uptype  ,dw      ,s2c     ,u       ,pnew    , &
                  abstrc  ,uinpl   , &
                  aer_trn_ngh)
    
             do i=1,ncol
                absnxt(i,k2,kn) = abso(i,1) + abso(i,2) + &
                     abso(i,3) + abso(i,4) + abstrc(i)
             end do
          end do ! do kn =
       end do ! do k2 =
    
       return
    end subroutine radabs
    

    subroutine trcab(ncol    ,                                     &
                     k1      ,k2      ,ucfc11  ,ucfc12  ,un2o0   , &
                     un2o1   ,uch4    ,uco211  ,uco212  ,uco213  , &
                     uco221  ,uco222  ,uco223  ,bn2o0   ,bn2o1   , &
                     bch4    ,to3co2  ,pnm     ,dw      ,pnew    , &
                     s2c     ,uptype  ,dplh2o  ,abplnk1 ,tco2    , &
                     th2o    ,to3     ,abstrc  , &
                     aer_trn_ttl)
    !----------------------------------------------------------------------- 
  
       integer, intent(in) :: ncol                     ! number of atmospheric columns
       integer, intent(in) :: k1,k2                    ! level indices
    !
       real(r8), intent(in) :: to3co2(pcols)           ! pressure weighted temperature
       real(r8), intent(in) :: pnm(pcols,pverp)        ! interface pressures
       real(r8), intent(in) :: ucfc11(pcols,pverp)     ! CFC11 path length
       real(r8), intent(in) :: ucfc12(pcols,pverp)     ! CFC12 path length
       real(r8), intent(in) :: un2o0(pcols,pverp)      ! N2O path length
    !
       real(r8), intent(in) :: un2o1(pcols,pverp)      ! N2O path length (hot band)
       real(r8), intent(in) :: uch4(pcols,pverp)       ! CH4 path length
       real(r8), intent(in) :: uco211(pcols,pverp)     ! CO2 9.4 micron band path length
       real(r8), intent(in) :: uco212(pcols,pverp)     ! CO2 9.4 micron band path length
       real(r8), intent(in) :: uco213(pcols,pverp)     ! CO2 9.4 micron band path length
    !
       real(r8), intent(in) :: uco221(pcols,pverp)     ! CO2 10.4 micron band path length
       real(r8), intent(in) :: uco222(pcols,pverp)     ! CO2 10.4 micron band path length
       real(r8), intent(in) :: uco223(pcols,pverp)     ! CO2 10.4 micron band path length
       real(r8), intent(in) :: bn2o0(pcols,pverp)      ! pressure factor for n2o
       real(r8), intent(in) :: bn2o1(pcols,pverp)      ! pressure factor for n2o
    !
       real(r8), intent(in) :: bch4(pcols,pverp)       ! pressure factor for ch4
       real(r8), intent(in) :: dw(pcols)               ! h2o path length
       real(r8), intent(in) :: pnew(pcols)             ! pressure
       real(r8), intent(in) :: s2c(pcols,pverp)        ! continuum path length
       real(r8), intent(in) :: uptype(pcols,pverp)     ! p-type h2o path length
    !
       real(r8), intent(in) :: dplh2o(pcols)           ! p squared h2o path length
       real(r8), intent(in) :: abplnk1(14,pcols,pverp) ! Planck factor
       real(r8), intent(in) :: tco2(pcols)             ! co2 transmission factor
       real(r8), intent(in) :: th2o(pcols)             ! h2o transmission factor
       real(r8), intent(in) :: to3(pcols)              ! o3 transmission factor
    
       real(r8), intent(in) :: aer_trn_ttl(pcols,pverp,pverp,nlwbands) ! aer trn.
    
    !
    !  Output Arguments
    !
       real(r8), intent(out) :: abstrc(pcols)           ! total trace gas absorptivity
    !
    !--------------------------Local Variables------------------------------
    !
       integer  i,l                     ! loop counters
    
       real(r8) sqti(pcols)             ! square root of mean temp
       real(r8) du1                     ! cfc11 path length
       real(r8) du2                     ! cfc12 path length
       real(r8) acfc1                   ! cfc11 absorptivity 798 cm-1
       real(r8) acfc2                   ! cfc11 absorptivity 846 cm-1
    !
       real(r8) acfc3                   ! cfc11 absorptivity 933 cm-1
       real(r8) acfc4                   ! cfc11 absorptivity 1085 cm-1
       real(r8) acfc5                   ! cfc12 absorptivity 889 cm-1
       real(r8) acfc6                   ! cfc12 absorptivity 923 cm-1
       real(r8) acfc7                   ! cfc12 absorptivity 1102 cm-1
    !
       real(r8) acfc8                   ! cfc12 absorptivity 1161 cm-1
       real(r8) du01                    ! n2o path length
       real(r8) dbeta01                 ! n2o pressure factor
       real(r8) dbeta11                 !         "
       real(r8) an2o1                   ! absorptivity of 1285 cm-1 n2o band
    !
       real(r8) du02                    ! n2o path length
       real(r8) dbeta02                 ! n2o pressure factor
       real(r8) an2o2                   ! absorptivity of 589 cm-1 n2o band
       real(r8) du03                    ! n2o path length
       real(r8) dbeta03                 ! n2o pressure factor
    !
       real(r8) an2o3                   ! absorptivity of 1168 cm-1 n2o band
       real(r8) duch4                   ! ch4 path length
       real(r8) dbetac                  ! ch4 pressure factor
       real(r8) ach4                    ! absorptivity of 1306 cm-1 ch4 band
       real(r8) du11                    ! co2 path length
    !
       real(r8) du12                    !       "
       real(r8) du13                    !       "
       real(r8) dbetc1                  ! co2 pressure factor
       real(r8) dbetc2                  ! co2 pressure factor
       real(r8) aco21                   ! absorptivity of 1064 cm-1 band
    !
       real(r8) du21                    ! co2 path length
       real(r8) du22                    !       "
       real(r8) du23                    !       "
       real(r8) aco22                   ! absorptivity of 961 cm-1 band
       real(r8) tt(pcols)               ! temp. factor for h2o overlap factor
    !
       real(r8) psi1                    !                 "
       real(r8) phi1                    !                 "
       real(r8) p1                      ! h2o overlap factor
       real(r8) w1                      !        "
       real(r8) ds2c(pcols)             ! continuum path length
    !
       real(r8) duptyp(pcols)           ! p-type path length
       real(r8) tw(pcols,6)             ! h2o transmission factor
    !   real(r8) g1(6)                   !         "
    !   real(r8) g2(6)                   !         "
    !   real(r8) g3(6)                   !         "
    !
    !   real(r8) g4(6)                   !         "
    !   real(r8) ab(6)                   ! h2o temp. factor
    !   real(r8) bb(6)                   !         "
    !   real(r8) abp(6)                  !         "
    !   real(r8) bbp(6)                  !         "
    !
       real(r8) tcfc3                   ! transmission for cfc11 band
       real(r8) tcfc4                   ! transmission for cfc11 band
       real(r8) tcfc6                   ! transmission for cfc12 band
       real(r8) tcfc7                   ! transmission for cfc12 band
       real(r8) tcfc8                   ! transmission for cfc12 band
    !
       real(r8) tlw                     ! h2o transmission
       real(r8) tch4                    ! ch4 transmission
    !
    !--------------------------Data Statements------------------------------
    !
    !   data g1 /0.0468556_r8,0.0397454_r8,0.0407664_r8,0.0304380_r8,0.0540398_r8,0.0321962_r8/
    !   data g2 /14.4832_r8,4.30242_r8,5.23523_r8,3.25342_r8,0.698935_r8,16.5599_r8/
    !   data g3 /26.1898_r8,18.4476_r8,15.3633_r8,12.1927_r8,9.14992_r8,8.07092_r8/
    !   data g4 /0.0261782_r8,0.0369516_r8,0.0307266_r8,0.0243854_r8,0.0182932_r8,0.0161418_r8/
    !   data ab /3.0857e-2_r8,2.3524e-2_r8,1.7310e-2_r8,2.6661e-2_r8,2.8074e-2_r8,2.2915e-2_r8/
    !   data bb /-1.3512e-4_r8,-6.8320e-5_r8,-3.2609e-5_r8,-1.0228e-5_r8,-9.5743e-5_r8,-1.0304e-4_r8/
    !   data abp/2.9129e-2_r8,2.4101e-2_r8,1.9821e-2_r8,2.6904e-2_r8,2.9458e-2_r8,1.9892e-2_r8/
    !   data bbp/-1.3139e-4_r8,-5.5688e-5_r8,-4.6380e-5_r8,-8.0362e-5_r8,-1.0115e-4_r8,-8.8061e-5_r8/
    !
    !--------------------------Statement Functions--------------------------
    !
       real(r8) func, u, b
       func(u,b) = u/sqrt(4.0_r8 + u*(1.0_r8 + 1.0_r8 / b))
    !
    !------------------------------------------------------------------------
    !
       do i = 1,ncol
          sqti(i) = sqrt(to3co2(i))
    !
    ! h2o transmission
    !
          tt(i) = abs(to3co2(i) - 250.0_r8)
          ds2c(i) = abs(s2c(i,k1) - s2c(i,k2))
          duptyp(i) = abs(uptype(i,k1) - uptype(i,k2))
       end do
    !
       do l = 1,6
          do i = 1,ncol
             psi1 = exp(abp(l)*tt(i) + bbp(l)*tt(i)*tt(i))
             phi1 = exp(ab(l)*tt(i) + bb(l)*tt(i)*tt(i))
             p1 = pnew(i)*(psi1/phi1)/sslp
             w1 = dw(i)*phi1  !这个地方的指数表达式可以化简 TODO
             tw(i,l) = exp(-g1(l)*p1*(sqrt(1.0_r8 + g2(l)*(w1/p1)) - 1.0_r8) - &
                       g3(l)*ds2c(i)-g4(l)*duptyp(i))
          end do
       end do
    !
       do i=1,ncol  !这个和上面的合并？
          tw(i,1)=tw(i,1)*(0.7_r8*aer_trn_ttl(i,k1,k2,idx_LW_0650_0800)+&! l=1: 0750--0820 cm-1
                           0.3_r8*aer_trn_ttl(i,k1,k2,idx_LW_0800_1000)) 
          tw(i,2)=tw(i,2)*aer_trn_ttl(i,k1,k2,idx_LW_0800_1000) ! l=2: 0820--0880 cm-1
          tw(i,3)=tw(i,3)*aer_trn_ttl(i,k1,k2,idx_LW_0800_1000) ! l=3: 0880--0900 cm-1
          tw(i,4)=tw(i,4)*aer_trn_ttl(i,k1,k2,idx_LW_0800_1000) ! l=4: 0900--1000 cm-1
          tw(i,5)=tw(i,5)*aer_trn_ttl(i,k1,k2,idx_LW_1000_1200) ! l=5: 1000--1120 cm-1
          tw(i,6)=tw(i,6)*aer_trn_ttl(i,k1,k2,idx_LW_1000_1200) ! l=6: 1120--1170 cm-1
       end do                    ! end loop over lon
       do i = 1,ncol
          du1 = abs(ucfc11(i,k1) - ucfc11(i,k2))
          du2 = abs(ucfc12(i,k1) - ucfc12(i,k2))
    !
    ! cfc transmissions
    !
          tcfc3 = exp(-175.005_r8*du1)
          tcfc4 = exp(-1202.18_r8*du1)
          tcfc6 = exp(-5786.73_r8*du2)
          tcfc7 = exp(-2873.51_r8*du2)
          tcfc8 = exp(-2085.59_r8*du2)
    !
    ! Absorptivity for CFC11 bands
    !
          acfc1 =  50.0_r8*(1.0_r8 - exp(-54.09_r8*du1))*tw(i,1)*abplnk1(7,i,k2)
          acfc2 =  60.0_r8*(1.0_r8 - exp(-5130.03_r8*du1))*tw(i,2)*abplnk1(8,i,k2)
          acfc3 =  60.0_r8*(1.0_r8 - tcfc3)*tw(i,4)*tcfc6*abplnk1(9,i,k2)
          acfc4 = 100.0_r8*(1.0_r8 - tcfc4)*tw(i,5)*abplnk1(10,i,k2)
    !
    ! Absorptivity for CFC12 bands
    !
          acfc5 = 45.0_r8*(1.0_r8 - exp(-1272.35_r8*du2))*tw(i,3)*abplnk1(11,i,k2)
          acfc6 = 50.0_r8*(1.0_r8 - tcfc6)* tw(i,4) * abplnk1(12,i,k2)
          acfc7 = 80.0_r8*(1.0_r8 - tcfc7)* tw(i,5) * tcfc4*abplnk1(13,i,k2)
          acfc8 = 70.0_r8*(1.0_r8 - tcfc8)* tw(i,6) * abplnk1(14,i,k2)
    !
    ! Emissivity for CH4 band 1306 cm-1
    !
          tlw = exp(-1.0_r8*sqrt(dplh2o(i)))
          tlw=tlw*aer_trn_ttl(i,k1,k2,idx_LW_1200_2000)
          duch4 = abs(uch4(i,k1) - uch4(i,k2))
          dbetac = abs(bch4(i,k1) - bch4(i,k2))/duch4
          ach4 = 6.00444_r8*sqti(i)*log(1.0_r8 + func(duch4,dbetac))*tlw*abplnk1(3,i,k2)
          tch4 = 1.0_r8/(1.0_r8 + 0.02_r8*func(duch4,dbetac))
    !
    ! Absorptivity for N2O bands
    !
          du01 = abs(un2o0(i,k1) - un2o0(i,k2))
          du11 = abs(un2o1(i,k1) - un2o1(i,k2))
          dbeta01 = abs(bn2o0(i,k1) - bn2o0(i,k2))/du01
          dbeta11 = abs(bn2o1(i,k1) - bn2o1(i,k2))/du11
    !
    ! 1285 cm-1 band
    !
          an2o1 = 2.35558_r8*sqti(i)*log(1.0_r8 + func(du01,dbeta01) &
                  + func(du11,dbeta11))*tlw*tch4*abplnk1(4,i,k2)
          du02 = 0.100090_r8*du01
          du12 = 0.0992746_r8*du11
          dbeta02 = 0.964282_r8*dbeta01
    !
    ! 589 cm-1 band
    !
          an2o2 = 2.65581_r8*sqti(i)*log(1.0_r8 + func(du02,dbeta02) + &
                  func(du12,dbeta02))*th2o(i)*tco2(i)*abplnk1(5,i,k2)
          du03 = 0.0333767_r8*du01
          dbeta03 = 0.982143_r8*dbeta01
    !
    ! 1168 cm-1 band
    !
          an2o3 = 2.54034_r8*sqti(i)*log(1.0_r8 + func(du03,dbeta03))* &
                  tw(i,6)*tcfc8*abplnk1(6,i,k2)
    !
    ! Emissivity for 1064 cm-1 band of CO2
    !
          du11 = abs(uco211(i,k1) - uco211(i,k2))
          du12 = abs(uco212(i,k1) - uco212(i,k2))
          du13 = abs(uco213(i,k1) - uco213(i,k2))
          dbetc1 = 2.97558_r8*abs(pnm(i,k1) + pnm(i,k2))/(2.0_r8*sslp*sqti(i))
          dbetc2 = 2.0_r8*dbetc1
          aco21 = 3.7571_r8*sqti(i)*log(1.0_r8 + func(du11,dbetc1) &
                  + func(du12,dbetc2) + func(du13,dbetc2)) &
                  *to3(i)*tw(i,5)*tcfc4*tcfc7*abplnk1(2,i,k2)
    !
    ! Emissivity for 961 cm-1 band
    !
          du21 = abs(uco221(i,k1) - uco221(i,k2))
          du22 = abs(uco222(i,k1) - uco222(i,k2))
          du23 = abs(uco223(i,k1) - uco223(i,k2))
          aco22 = 3.8443_r8*sqti(i)*log(1.0_r8 + func(du21,dbetc1) &
                  + func(du22,dbetc1) + func(du23,dbetc2)) &
                  *tw(i,4)*tcfc3*tcfc6*abplnk1(1,i,k2)
    !
    ! total trace gas absorptivity
    !
          abstrc(i) = acfc1 + acfc2 + acfc3 + acfc4 + acfc5 + acfc6 + &
                      acfc7 + acfc8 + an2o1 + an2o2 + an2o3 + ach4 + &
                      aco21 + aco22
       end do
    
    end subroutine trcab
    
    !====================================================================================
    
    subroutine trcabn(ncol    ,                                     &
                      k2      ,kn      ,ucfc11  ,ucfc12  ,un2o0   , &
                      un2o1   ,uch4    ,uco211  ,uco212  ,uco213  , &
                      uco221  ,uco222  ,uco223  ,tbar    ,bplnk   , &
                      winpl   ,pinpl   ,tco2    ,th2o    ,to3     , &
                      uptype  ,dw      ,s2c     ,up2     ,pnew    , &
                      abstrc  ,uinpl   , &
                      aer_trn_ngh)
    !----------------------------------------------------------------------- 
    ! 
    ! Purpose: 
    ! Calculate nearest layer absorptivity due to CH4, N2O, CFC11 and CFC12
    ! 
    ! Method: 
    ! Equations in CCM3 description
    ! 
    ! Author: J. Kiehl
    ! 
    !-----------------------------------------------------------------------
    
    !------------------------------Arguments--------------------------------
    !
    ! Input arguments
    !
       integer, intent(in) :: ncol                  ! number of atmospheric columns
       integer, intent(in) :: k2                    ! level index
       integer, intent(in) :: kn                    ! level index
    !
       real(r8), intent(in) :: tbar(pcols,4)        ! pressure weighted temperature
       real(r8), intent(in) :: ucfc11(pcols,pverp)  ! CFC11 path length
       real(r8), intent(in) :: ucfc12(pcols,pverp)  ! CFC12 path length
       real(r8), intent(in) :: un2o0(pcols,pverp)   ! N2O path length
       real(r8), intent(in) :: un2o1(pcols,pverp)   ! N2O path length (hot band)
    !
       real(r8), intent(in) :: uch4(pcols,pverp)    ! CH4 path length
       real(r8), intent(in) :: uco211(pcols,pverp)  ! CO2 9.4 micron band path length
       real(r8), intent(in) :: uco212(pcols,pverp)  ! CO2 9.4 micron band path length
       real(r8), intent(in) :: uco213(pcols,pverp)  ! CO2 9.4 micron band path length
       real(r8), intent(in) :: uco221(pcols,pverp)  ! CO2 10.4 micron band path length
    !
       real(r8), intent(in) :: uco222(pcols,pverp)  ! CO2 10.4 micron band path length
       real(r8), intent(in) :: uco223(pcols,pverp)  ! CO2 10.4 micron band path length
       real(r8), intent(in) :: bplnk(14,pcols,4)    ! weighted Planck fnc. for absorptivity
       real(r8), intent(in) :: winpl(pcols,4)       ! fractional path length
       real(r8), intent(in) :: pinpl(pcols,4)       ! pressure factor for subdivided layer
    !
       real(r8), intent(in) :: tco2(pcols)          ! co2 transmission
       real(r8), intent(in) :: th2o(pcols)          ! h2o transmission
       real(r8), intent(in) :: to3(pcols)           ! o3 transmission
       real(r8), intent(in) :: dw(pcols)            ! h2o path length
       real(r8), intent(in) :: pnew(pcols)          ! pressure factor
    !
       real(r8), intent(in) :: s2c(pcols,pverp)     ! h2o continuum factor
       real(r8), intent(in) :: uptype(pcols,pverp)  ! p-type path length
       real(r8), intent(in) :: up2(pcols)           ! p squared path length
       real(r8), intent(in) :: uinpl(pcols,4)       ! Nearest layer subdivision factor
       real(r8), intent(in) :: aer_trn_ngh(pcols,nlwbands) 
                                 ! [fraction] Total transmission between 
                                 !            nearest neighbor sub-levels
    !
    !  Output Arguments
    !
       real(r8), intent(out) :: abstrc(pcols)        ! total trace gas absorptivity
    
    !
    !--------------------------Local Variables------------------------------
    !
       integer i,l                   ! loop counters
    !
       real(r8) sqti(pcols)          ! square root of mean temp
       real(r8) rsqti(pcols)         ! reciprocal of sqti
       real(r8) du1                  ! cfc11 path length
       real(r8) du2                  ! cfc12 path length
       real(r8) acfc1                ! absorptivity of cfc11 798 cm-1 band
    !
       real(r8) acfc2                ! absorptivity of cfc11 846 cm-1 band
       real(r8) acfc3                ! absorptivity of cfc11 933 cm-1 band
       real(r8) acfc4                ! absorptivity of cfc11 1085 cm-1 band
       real(r8) acfc5                ! absorptivity of cfc11 889 cm-1 band
       real(r8) acfc6                ! absorptivity of cfc11 923 cm-1 band
    !
       real(r8) acfc7                ! absorptivity of cfc11 1102 cm-1 band
       real(r8) acfc8                ! absorptivity of cfc11 1161 cm-1 band
       real(r8) du01                 ! n2o path length
       real(r8) dbeta01              ! n2o pressure factors
       real(r8) dbeta11              !        "
    !
       real(r8)  an2o1               ! absorptivity of the 1285 cm-1 n2o band
       real(r8) du02                 ! n2o path length
       real(r8) dbeta02              ! n2o pressure factor
       real(r8) an2o2                ! absorptivity of the 589 cm-1 n2o band
       real(r8) du03                 ! n2o path length
    !
       real(r8) dbeta03              ! n2o pressure factor
       real(r8) an2o3                ! absorptivity of the 1168 cm-1 n2o band
       real(r8) duch4                ! ch4 path length
       real(r8) dbetac               ! ch4 pressure factor
       real(r8) ach4                 ! absorptivity of the 1306 cm-1 ch4 band
    !
       real(r8) du11                 ! co2 path length
       real(r8) du12                 !       "
       real(r8) du13                 !       "
       real(r8) dbetc1               ! co2 pressure factor
       real(r8) dbetc2               ! co2 pressure factor
    !
       real(r8) aco21                ! absorptivity of the 1064 cm-1 co2 band
       real(r8) du21                 ! co2 path length
       real(r8) du22                 !       "
       real(r8) du23                 !       "
       real(r8) aco22                ! absorptivity of the 961 cm-1 co2 band
    !
       real(r8) tt(pcols)            ! temp. factor for h2o overlap
       real(r8) psi1                 !          "
       real(r8) phi1                 !          "
       real(r8) p1                   ! factor for h2o overlap
       real(r8) w1                   !          "
    !
       real(r8) ds2c(pcols)          ! continuum path length
       real(r8) duptyp(pcols)        ! p-type path length
       real(r8) tw(pcols,6)          ! h2o transmission overlap
    !   real(r8) g1(6)                ! h2o overlap factor
    !   real(r8) g2(6)                !         "
    !
    !   real(r8) g3(6)                !         "
    !   real(r8) g4(6)                !         "
    !   real(r8) ab(6)                ! h2o temp. factor
    !   real(r8) bb(6)                !         "
    !   real(r8) abp(6)               !         "
    !
    !   real(r8) bbp(6)               !         "
       real(r8) tcfc3                ! transmission of cfc11 band
       real(r8) tcfc4                ! transmission of cfc11 band
       real(r8) tcfc6                ! transmission of cfc12 band
       real(r8) tcfc7                !         "
    !
       real(r8) tcfc8                !         "
       real(r8) tlw                  ! h2o transmission
       real(r8) tch4                 ! ch4 transmission
    !
    !--------------------------Data Statements------------------------------
    !
    !   data g1 /0.0468556_r8,0.0397454_r8,0.0407664_r8,0.0304380_r8,0.0540398_r8,0.0321962_r8/
    !   data g2 /14.4832_r8,4.30242_r8,5.23523_r8,3.25342_r8,0.698935_r8,16.5599_r8/
    !   data g3 /26.1898_r8,18.4476_r8,15.3633_r8,12.1927_r8,9.14992_r8,8.07092_r8/
    !   data g4 /0.0261782_r8,0.0369516_r8,0.0307266_r8,0.0243854_r8,0.0182932_r8,0.0161418_r8/
    !   data ab /3.0857e-2_r8,2.3524e-2_r8,1.7310e-2_r8,2.6661e-2_r8,2.8074e-2_r8,2.2915e-2_r8/
    !   data bb /-1.3512e-4_r8,-6.8320e-5_r8,-3.2609e-5_r8,-1.0228e-5_r8,-9.5743e-5_r8,-1.0304e-4_r8/
    !   data abp/2.9129e-2_r8,2.4101e-2_r8,1.9821e-2_r8,2.6904e-2_r8,2.9458e-2_r8,1.9892e-2_r8/
    !   data bbp/-1.3139e-4_r8,-5.5688e-5_r8,-4.6380e-5_r8,-8.0362e-5_r8,-1.0115e-4_r8,-8.8061e-5_r8/
    !
    !--------------------------Statement Functions--------------------------
    !
       real(r8) func, u, b
       func(u,b) = u/sqrt(4.0_r8 + u*(1.0_r8 + 1.0_r8 / b))
    !
    !------------------------------------------------------------------
    !
       do i = 1,ncol
          sqti(i) = sqrt(tbar(i,kn))
          rsqti(i) = 1._r8 / sqti(i)
    !
    ! h2o transmission
    !
          tt(i) = abs(tbar(i,kn) - 250.0_r8)
          ds2c(i) = abs(s2c(i,k2+1) - s2c(i,k2))*uinpl(i,kn)
          duptyp(i) = abs(uptype(i,k2+1) - uptype(i,k2))*uinpl(i,kn)
       end do
    !
       do l = 1,6
          do i = 1,ncol
             psi1 = exp(abp(l)*tt(i)+bbp(l)*tt(i)*tt(i))
             phi1 = exp(ab(l)*tt(i)+bb(l)*tt(i)*tt(i))
             p1 = pnew(i) * (psi1/phi1) / sslp
             w1 = dw(i) * winpl(i,kn) * phi1
             tw(i,l) = exp(- g1(l)*p1*(sqrt(1.0_r8+g2(l)*(w1/p1))-1.0_r8) &
                       - g3(l)*ds2c(i)-g4(l)*duptyp(i))
          end do
       end do
    !
       do i=1,ncol
          tw(i,1)=tw(i,1)*(0.7_r8*aer_trn_ngh(i,idx_LW_0650_0800)+&! l=1: 0750--0820 cm-1
                           0.3_r8*aer_trn_ngh(i,idx_LW_0800_1000))
          tw(i,2)=tw(i,2)*aer_trn_ngh(i,idx_LW_0800_1000) ! l=2: 0820--0880 cm-1
          tw(i,3)=tw(i,3)*aer_trn_ngh(i,idx_LW_0800_1000) ! l=3: 0880--0900 cm-1
          tw(i,4)=tw(i,4)*aer_trn_ngh(i,idx_LW_0800_1000) ! l=4: 0900--1000 cm-1
          tw(i,5)=tw(i,5)*aer_trn_ngh(i,idx_LW_1000_1200) ! l=5: 1000--1120 cm-1
          tw(i,6)=tw(i,6)*aer_trn_ngh(i,idx_LW_1000_1200) ! l=6: 1120--1170 cm-1
       end do                    ! end loop over lon
    
       do i = 1,ncol
    !
          du1 = abs(ucfc11(i,k2+1) - ucfc11(i,k2)) * winpl(i,kn)
          du2 = abs(ucfc12(i,k2+1) - ucfc12(i,k2)) * winpl(i,kn)
    !
    ! cfc transmissions
    !
          tcfc3 = exp(-175.005_r8*du1)
          tcfc4 = exp(-1202.18_r8*du1)
          tcfc6 = exp(-5786.73_r8*du2)
          tcfc7 = exp(-2873.51_r8*du2)
          tcfc8 = exp(-2085.59_r8*du2)
    !
    ! Absorptivity for CFC11 bands
    !
          acfc1 = 50.0_r8*(1.0_r8 - exp(-54.09_r8*du1)) * tw(i,1)*bplnk(7,i,kn)
          acfc2 = 60.0_r8*(1.0_r8 - exp(-5130.03_r8*du1))*tw(i,2)*bplnk(8,i,kn)
          acfc3 = 60.0_r8*(1.0_r8 - tcfc3)*tw(i,4)*tcfc6 * bplnk(9,i,kn)
          acfc4 = 100.0_r8*(1.0_r8 - tcfc4)* tw(i,5) * bplnk(10,i,kn)
    !
    ! Absorptivity for CFC12 bands
    !
          acfc5 = 45.0_r8*(1.0_r8 - exp(-1272.35_r8*du2))*tw(i,3)*bplnk(11,i,kn)
          acfc6 = 50.0_r8*(1.0_r8 - tcfc6)*tw(i,4)*bplnk(12,i,kn)
          acfc7 = 80.0_r8*(1.0_r8 - tcfc7)* tw(i,5)*tcfc4 *bplnk(13,i,kn)
          acfc8 = 70.0_r8*(1.0_r8 - tcfc8)*tw(i,6)*bplnk(14,i,kn)
    !
    ! Absorptivity for CH4 band 1306 cm-1
    !
          tlw = exp(-1.0_r8*sqrt(up2(i)))
          tlw=tlw*aer_trn_ngh(i,idx_LW_1200_2000)
          duch4 = abs(uch4(i,k2+1) - uch4(i,k2)) * winpl(i,kn)
          dbetac = 2.94449_r8 * pinpl(i,kn) * rsqti(i) / sslp
          ach4 = 6.00444_r8*sqti(i)*log(1.0_r8 + func(duch4,dbetac)) * tlw * bplnk(3,i,kn)
          tch4 = 1.0_r8/(1.0_r8 + 0.02_r8*func(duch4,dbetac))
    !
    ! Absorptivity for N2O bands
    !
          du01 = abs(un2o0(i,k2+1) - un2o0(i,k2)) * winpl(i,kn)
          du11 = abs(un2o1(i,k2+1) - un2o1(i,k2)) * winpl(i,kn)
          dbeta01 = 19.399_r8 *  pinpl(i,kn) * rsqti(i) / sslp
          dbeta11 = dbeta01
    !
    ! 1285 cm-1 band
    !
          an2o1 = 2.35558_r8*sqti(i)*log(1.0_r8 + func(du01,dbeta01) &
                  + func(du11,dbeta11)) * tlw * tch4 * bplnk(4,i,kn)
          du02 = 0.100090_r8*du01
          du12 = 0.0992746_r8*du11
          dbeta02 = 0.964282_r8*dbeta01
    !
    ! 589 cm-1 band
    !
          an2o2 = 2.65581_r8*sqti(i)*log(1.0_r8 + func(du02,dbeta02) &
                  +  func(du12,dbeta02)) * tco2(i) * th2o(i) * bplnk(5,i,kn)
          du03 = 0.0333767_r8*du01
          dbeta03 = 0.982143_r8*dbeta01
    !
    ! 1168 cm-1 band
    !
          an2o3 = 2.54034_r8*sqti(i)*log(1.0_r8 + func(du03,dbeta03)) * &
                  tw(i,6) * tcfc8 * bplnk(6,i,kn)
    !
    ! Absorptivity for 1064 cm-1 band of CO2
    !
          du11 = abs(uco211(i,k2+1) - uco211(i,k2)) * winpl(i,kn)
          du12 = abs(uco212(i,k2+1) - uco212(i,k2)) * winpl(i,kn)
          du13 = abs(uco213(i,k2+1) - uco213(i,k2)) * winpl(i,kn)
          dbetc1 = 2.97558_r8 * pinpl(i,kn) * rsqti(i) / sslp
          dbetc2 = 2.0_r8 * dbetc1
          aco21 = 3.7571_r8*sqti(i)*log(1.0_r8 + func(du11,dbetc1) &
                  + func(du12,dbetc2) + func(du13,dbetc2)) &
                  * to3(i) * tw(i,5) * tcfc4 * tcfc7 * bplnk(2,i,kn)
    !
    ! Absorptivity for 961 cm-1 band of co2
    !
          du21 = abs(uco221(i,k2+1) - uco221(i,k2)) * winpl(i,kn)
          du22 = abs(uco222(i,k2+1) - uco222(i,k2)) * winpl(i,kn)
          du23 = abs(uco223(i,k2+1) - uco223(i,k2)) * winpl(i,kn)
          aco22 = 3.8443_r8*sqti(i)*log(1.0_r8 + func(du21,dbetc1) &
                  + func(du22,dbetc1) + func(du23,dbetc2)) &
                  * tw(i,4) * tcfc3 * tcfc6 * bplnk(1,i,kn)
    !
    ! total trace gas absorptivity
    !
          abstrc(i) = acfc1 + acfc2 + acfc3 + acfc4 + acfc5 + acfc6 + &
                      acfc7 + acfc8 + an2o1 + an2o2 + an2o3 + ach4 + &
                      aco21 + aco22
       end do
    
    end subroutine trcabn
    
    
    !====================================================================================
    
    elemental subroutine qsat_water(t, p, es, qs) ! for inline
      !------------------------------------------------------------------!
      ! Purpose:                                                         !
      !   Calculate SVP over water at a given temperature, and then      !
      !   calculate and return saturation specific humidity.             !
      !   Optionally return various temperature derivatives or enthalpy  !
      !   at saturation.                                                 !
      !------------------------------------------------------------------!
    
      real(r8), parameter :: tboil = 373.16_r8
      ! Inputs
      real(r8), intent(in) :: t    ! Temperature
      real(r8), intent(in) :: p    ! Pressure
      ! Outputs
      real(r8), intent(out) :: es  ! Saturation vapor pressure
      real(r8), intent(out) :: qs  ! Saturation specific humidity
    !todo rgy change this to exp10
    
      es = 10._r8**(-7.90298_r8*(tboil/t-1._r8)+ &
           5.02808_r8*log10(tboil/t)- &
           1.3816e-7_r8*(10._r8**(11.344_r8*(1._r8-t/tboil))-1._r8)+ &
           8.1328e-3_r8*(10._r8**(-3.49149_r8*(tboil/t-1._r8))-1._r8)+ &
           log10(1013.246_r8))*100._r8
    
       if ( (p - es) <= 0._r8 ) then
         qs = 1.0_r8
      else
         qs = epsilo*es / (p - omeps*es)
      end if
    
      es = min(es, p)
    
    
    end subroutine qsat_water


    function phi(tpx,iband)
        !
        ! History: First version for Hitran 1996 (C/H/E)
        !          Current version for Hitran 2000 (C/LT/E)
        ! Short function for Hulst-Curtis-Godson temperature factors for
        !   computing effective H2O path
        ! Line data for H2O: Hitran 2000, plus H2O patches v11.0 for 1341 missing
        !                    lines between 500 and 2820 cm^-1.
        !                    See cfa-www.harvard.edu/HITRAN
        ! Isotopes of H2O: all
        ! Line widths: air-broadened only (self set to 0)
        ! Code for line strengths and widths: GENLN3
        ! Reference: Edwards, D.P., 1992: GENLN2, A General Line-by-Line Atmospheric
        !                     Transmittance and Radiance Model, Version 3.0 Description
        !                     and Users Guide, NCAR/TN-367+STR, 147 pp.
        !
        ! Note: functions have been normalized by dividing by their values at
        !       a path temperature of 160K
        !
        ! spectral intervals:
        !   1 = 0-800 cm^-1 and 1200-2200 cm^-1
        !   2 = 800-1200 cm^-1      
        !
        ! Formulae: Goody and Yung, Atmospheric Radiation: Theoretical Basis, 
        !           2nd edition, Oxford University Press, 1989.
        ! Phi: function for H2O path
        !      eq. 6.25, p. 228
        !
           real(r8),intent(in):: tpx      ! path temperature
           integer, intent(in):: iband    ! band to process
           real(r8) phi                   ! phi for given band
           real(r8),parameter ::  phi_r0(nbands) = (/ 9.60917711E-01_r8, -2.21031342E+01_r8/)
           real(r8),parameter ::  phi_r1(nbands) = (/ 4.86076751E-04_r8,  4.24062610E-01_r8/)
           real(r8),parameter ::  phi_r2(nbands) = (/-1.84806265E-06_r8, -2.95543415E-03_r8/)
           real(r8),parameter ::  phi_r3(nbands) = (/ 2.11239959E-09_r8,  7.52470896E-06_r8/)
        
           phi = (((phi_r3(iband) * tpx) + phi_r2(iband)) * tpx + phi_r1(iband)) &
                  * tpx + phi_r0(iband)
        end function phi
        
        !====================================================================================
        
        function psi(tpx,iband)
        !
        ! History: First version for Hitran 1996 (C/H/E)
        !          Current version for Hitran 2000 (C/LT/E)
        ! Short function for Hulst-Curtis-Godson temperature factors for
        !   computing effective H2O path
        ! Line data for H2O: Hitran 2000, plus H2O patches v11.0 for 1341 missing
        !                    lines between 500 and 2820 cm^-1. 
        !                    See cfa-www.harvard.edu/HITRAN
        ! Isotopes of H2O: all
        ! Line widths: air-broadened only (self set to 0)
        ! Code for line strengths and widths: GENLN3
        ! Reference: Edwards, D.P., 1992: GENLN2, A General Line-by-Line Atmospheric
        !                     Transmittance and Radiance Model, Version 3.0 Description
        !                     and Users Guide, NCAR/TN-367+STR, 147 pp.
        !
        ! Note: functions have been normalized by dividing by their values at
        !       a path temperature of 160K
        !
        ! spectral intervals:
        !   1 = 0-800 cm^-1 and 1200-2200 cm^-1
        !   2 = 800-1200 cm^-1      
        !
        ! Formulae: Goody and Yung, Atmospheric Radiation: Theoretical Basis, 
        !           2nd edition, Oxford University Press, 1989.
        ! Psi: function for pressure along path
        !      eq. 6.30, p. 228
        !
           real(r8),intent(in):: tpx      ! path temperature
           integer, intent(in):: iband    ! band to process
           real(r8) psi                   ! psi for given band
           real(r8),parameter ::  psi_r0(nbands) = (/ 5.65308452E-01_r8, -7.30087891E+01_r8/)
           real(r8),parameter ::  psi_r1(nbands) = (/ 4.07519005E-03_r8,  1.22199547E+00_r8/)
           real(r8),parameter ::  psi_r2(nbands) = (/-1.04347237E-05_r8, -7.12256227E-03_r8/)
           real(r8),parameter ::  psi_r3(nbands) = (/ 1.23765354E-08_r8,  1.47852825E-05_r8/)
        
           psi = (((psi_r3(iband) * tpx) + psi_r2(iband)) * tpx + psi_r1(iband)) * tpx + psi_r0(iband)
        
        end function psi
        function fh2oself( temp )
            !
            ! Short function for H2O self-continuum temperature factor in
            !   calculation of effective H2O self-continuum path length
            !
            ! H2O Continuum: CKD 2.4
            ! Code for continuum: GENLN3
            ! Reference: Edwards, D.P., 1992: GENLN2, A General Line-by-Line Atmospheric
            !                     Transmittance and Radiance Model, Version 3.0 Description
            !                     and Users Guide, NCAR/TN-367+STR, 147 pp.
            !
            ! In GENLN, the temperature scaling of the self-continuum is handled
            !    by exponential interpolation/extrapolation from observations at
            !    260K and 296K by:
            !
            !         TFAC =  (T(IPATH) - 296.0)/(260.0 - 296.0) 
            !         CSFFT = CSFF296*(CSFF260/CSFF296)**TFAC
            !
            ! For 800-1200 cm^-1, (CSFF260/CSFF296) ranges from ~2.1 to ~1.9
            !     with increasing wavenumber.  The ratio <CSFF260>/<CSFF296>,
            !     where <> indicates average over wavenumber, is ~2.07
            ! 
            ! fh2oself is (<CSFF260>/<CSFF296>)**TFAC
            !
               real(r8),intent(in) :: temp     ! path temperature
               real(r8) fh2oself               ! mean ratio of self-continuum at temp and 296K
            
               fh2oself = 2.0727484_r8**((296.0_r8 - temp) / 36.0_r8)
            end function fh2oself
            
    end module radae
